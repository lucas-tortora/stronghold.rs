var searchIndex = JSON.parse('{\
"engine":{"doc":"A system for securely managing secrets.","t":[7,13,13,13,13,13,4,13,13,13,13,13,13,6,13,13,13,13,11,11,14,11,11,11,11,11,11,11,0,11,0,11,11,11,11,0,6,17,6,17,5,0,5,0,0,0,5,5,5,5,3,3,11,11,11,11,11,11,0,12,0,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,3,11,11,11,5,5,11,11,12,11,11,12,11,11,11,11,11,11,12,11,11,11,17,3,11,11,11,5,5,12,12,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,5,5,5,5,5,17,6,17,17,6,17,5,5,5,5,5,5,3,12,12,0,12,0,12,3,11,11,0,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,11,11,11,11,12,12,12,12,12,12,8,8,8,3,3,8,8,3,3,3,3,3,12,0,10,10,10,10,10,0,10,12,10,0,0,3,8,8,18,10,11,11,11,11,11,11,11,10,11,11,11,11,8,8,8,3,12,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,10,11,11,11,11,11,11,11,8,8,0,0,11,11,12,12,12,13,3,13,3,3,3,17,3,4,8,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11],"n":["ALLOC","Base64Error","Base64ErrorDetailed","ChainError","CryptoError","DatabaseError","Error","InterfaceError","IoError","Lz4Error","OtherError","ProtocolError","ProviderError","Result","SnapshotError","TryIntoError","ValueError","VersionError","borrow","borrow_mut","cache","fmt","fmt","from","from","from","from","into","snapshot","source","store","to_string","try_from","try_into","type_id","vault","Key","MAGIC","Nonce","VERSION","compress","compression","decompress","files","kdf","logic","read","read_from","write","write_to","Block","Duplicate","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decoder","duplicates","encoder","fmt","fmt","from","from","into","into","literal_length","offset","padding","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Lz4Decoder","borrow","borrow_mut","complete","decompress","decompress_into","duplicate","from","input","into","output","output","read_duplicate","read_int","read_literal","read_u16","take","take_internal","token","try_from","try_into","type_id","DICT_SIZE","Lz4Encoder","borrow","borrow_mut","complete","compress","compress_into","cursor","dict","find_duplicate","from","get","get_at_cursor","get_cursor_hash","input","insert_cursor","into","output","pop_block","remaining","step_forward","try_from","try_into","type_id","write_int","get_path","home_dir","snapshot_dir","verify_or_create","naive_kdf","KEY_SIZE","Key","MAGIC","NONCE_SIZE","Nonce","VERSION","check_header","check_min_file_len","read","read_from","write","write_to","Cache","created_at","last_scan_at","macros","scan_freq","storage","table","Value","borrow","borrow_mut","cache","clone","clone_into","deserialize","expiration","fmt","from","has_expired","into","new","serialize","to_owned","try_from","try_into","type_id","val","Cache","borrow","borrow_mut","clear","clone","clone_into","contains_key","create_with_scanner","created_at","default","deserialize","fmt","from","get","get_last_scanned_at","get_or_insert","get_scan_freq","insert","into","last_scan_at","new","remove","scan_freq","serialize","table","to_owned","try_from","try_into","try_remove_expired_items","type_id","0","0","0","0","0","0","Base64Decodable","Base64Encodable","BoxProvider","ChainId","ClientId","Decrypt","Encrypt","Id","Key","RecordHint","RecordId","VaultId","_box_provider","base64","base64","box_key_len","box_open","box_overhead","box_seal","crypto_box","from_base64","key","random_buf","types","view","Base64","Base64Decodable","Base64Encodable","PADDING","base64","borrow","borrow_mut","decode_byte","decode_data","encode_byte","encode_data","from","from_base64","into","try_from","try_into","type_id","BoxProvider","Decrypt","Encrypt","Key","_box_provider","borrow","borrow_mut","box_key_len","box_open","box_overhead","box_seal","bytes","clone","clone_into","cmp","decrypt","decrypt","deserialize","encrypt","encrypt","eq","fmt","from","hash","into","key","load","partial_cmp","random","random_buf","random_vec","random_vec","serialize","to_owned","try_from","try_into","type_id","AsView","AsViewMut","transactions","utils","view","view_mut","0","0","0","Data","DataTransaction","Revocation","RevocationTransaction","SealedBlob","SealedTransaction","TRANSACTION_MAX_BYTES","Transaction","TransactionType","TypedTransaction","UntypedTransaction","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","blob","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","deserialize","deserialize","deserialize","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","hash","hash","id","id","id","into","into","into","into","into","into","into","len","ne","new","new","partial_cmp","record_hint","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typed","untyped","val","0","0","0","0","0","0","0","0","BlobId","ChainId","ClientId","Id","RecordHint","RecordId","Val","VaultId","add","add_assign","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","load","load","load","load","load","ne","ne","ne","ne","ne","ne","ne","ne","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","random","random","random","random","random","random","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u64","DbView","Record","Vault","add_or_update_record","blob","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_id","clear","clone","clone","clone","clone_into","clone_into","clone_into","contains_record","contains_record","data","default","deserialize","deserialize","deserialize","entries","exec_proc","from","from","from","garbage_collect","garbage_collect_vault","get_blob","get_guard","get_guard","get_hint_and_id","id","init_vault","init_vault","into","into","into","key","list_hints_and_ids","list_hints_and_ids","new","new","revoke","revoke","revoke","revoke_record","serialize","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","vaults","write"],"q":["engine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","engine::snapshot","","","","","","","","","","","","","","engine::snapshot::compression","","","","","","","","","","","","","","","","","","","","","","","","","","","engine::snapshot::compression::decoder","","","","","","","","","","","","","","","","","","","","","","engine::snapshot::compression::encoder","","","","","","","","","","","","","","","","","","","","","","","","","engine::snapshot::files","","","","engine::snapshot::kdf","engine::snapshot::logic","","","","","","","","","","","","engine::store","","","","","","","engine::store::storage","","","","","","","","","","","","","","","","","","","engine::store::storage::cache","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","engine::vault","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","engine::vault::base64","","","","","","","","","","","","","","","","","engine::vault::crypto_box","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","engine::vault::types","","","","","","engine::vault::types::transactions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","engine::vault::types::utilsengine::vault::view","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A Zeroing Allocator which wraps the standard memory …","","","","","","Error block for the Engine.","","","","","","","Result type for the Engine.","","","","","","","A macro for defining functions whose return values will …","","","","","","","","This crate defines and implements the encrypted offline …","","This crate contains a key/value cache for the stronghold …","","","","","Vault is an in-memory database specification which is …","Key type alias.","Magic bytes (bytes 0-4 in a snapshot file) aka PARTI","Nonce type alias","Current version bytes (bytes 5-6 in a snapshot file)","Compress data using an LZ4 Algorithm.","","Decompress data using an LZ4 Algorithm.","","","","Read ciphertext from the input, decrypts it using the …","<code>read</code> and decrypt the ciphertext from the specified path","Encrypt the opaque plaintext bytestring using the …","Atomically encrypt and <code>write</code> the specified plaintext to …","Block for the LZ4 compression algorithm.","Duplicate represented in the LZ4 algorithm.","","","","","","","","","","","","","","","","","","","","","","","","","","Lz4Decoder implementation.","","","","Decompress data using an LZ4 Algorithm.","Public function to decompress some data into an output.","","","","","","","","","","","","","","","","","Dictionary size.","Lz4Encoder implementation.","","","","Compress data using an LZ4 Algorithm.","Public function for compression some input into an output …","","","","","","","","","","","","","","","","","","","Construct the path to a snapshot file with the specifed …","Get the preferred Stronghold home directory","Get the preferred snapshot directory","","a wrapper around the [<code>HMAC_SHA256</code>] function used to …","Key size for the ephemeral key","Key type alias.","Magic bytes (bytes 0-4 in a snapshot file) aka PARTI","Nonce size for XChaCha20Poly1305","Nonce type alias","Current version bytes (bytes 5-6 in a snapshot file)","Checks the header for a specific structure; explicitly …","","Read ciphertext from the input, decrypts it using the …","<code>read</code> and decrypt the ciphertext from the specified path","Encrypt the opaque plaintext bytestring using the …","Atomically encrypt and <code>write</code> the specified plaintext to …","The <code>Cache</code> struct used to store the data in an ordered …","","","","","","","The general value used for the [<code>Store</code>].","","","","","","","","","","Checks to see if the <code>Value</code> has expired.","","Create a new <code>Value</code> with a specified expiration.","","","","","","","The <code>Cache</code> struct used to store the data in an ordered …","","","Clear the stored cache and reset.","","","","creates an empty <code>Cache</code> with a periodic scanner which …","","","","","","Gets the value associated with the specified key.","","Gets the value associated with the specified key.  If the …","Get the cache’s scan frequency.","Insert a key-value pair into the cache. If key was not …","","","creates a new empty <code>Cache</code>","Removes a key from the cache.  Returns the value from the …","","","","","","","attempts to remove expired items based on the current …","","","","","","","","a trait to make types base64 decodable","a trait to make types base64 encodable","A provider interface between the vault and a crypto box. …","A chain identifier.  Used to identify a transaction.","Client Id type used to identify a client.","Trait for decryptable data. Allows the data to be …","trait for encryptable data. Allows the data to be …","A generic Id type used as the underlying type for the …","A key to the crypto box.  <code>Key</code> is stored on the heap which …","a record hint.  Used as a hint to what this data is used …","A record identifier.  Contains a <code>ChainId</code> which refers to …","Vault Id type used to identify a vault.","phantom data to call to the provider.","","","defines the key length for the <code>BoxProvider</code>.","opens a crypto box to get data using the <code>Key</code> and the …","defines the size of the Nonce combined with the Ad for …","seals some data into the crypto box using the <code>Key</code> and the …","","","the guarded raw bytes that make up the key","fills a buffer [<code>&mut [u8]</code>] with secure random bytes.","","","a <code>Base64</code> encoder and decoder used in the Vault.","a trait to make types base64 decodable","a trait to make types base64 encodable","base64 padding character","","","","decode a single byte","decode a [<code>&[u8]</code>] from base64 based off of the URI safe …","encode a single byte","encode a [<code>&[u8]</code>] using a base64 uri-safe character set.","","","","","","","A provider interface between the vault and a crypto box. …","Trait for decryptable data. Allows the data to be …","trait for encryptable data. Allows the data to be …","A key to the crypto box.  <code>Key</code> is stored on the heap which …","phantom data to call to the provider.","","","defines the key length for the <code>BoxProvider</code>.","opens a crypto box to get data using the <code>Key</code> and the …","defines the size of the Nonce combined with the Ad for …","seals some data into the crypto box using the <code>Key</code> and the …","get the key’s bytes from the <code>GuardedVec</code>","","","","decrypts raw data and creates a new type T from the …","decrypts raw data and creates a new type T from the …","","encrypts a raw data and creates a type T from the …","encrypts a raw data and creates a type T from the …","","","","","","the guarded raw bytes that make up the key","attempts to load a key from inputted data","","generate a random key using secure random bytes","fills a buffer [<code>&mut [u8]</code>] with secure random bytes.","creates a vector with secure random bytes based off of an …","creates a vector with secure random bytes based off of an …","","","","","","A trait that is used to make a view over some raw data.","A trait used to make a mutable view over some raw data.","","","creates a view over <code>self</code>.","creates a mutable view over <code>self</code>.","","","","","A structured data transaction","","A structured revocation transaction.","A sealed blob type which contains encrypted data in byte …","a sealed transaction","","a generic transaction (untyped) in a byte format.","A generic transaction type enum.  Data Transactions refer …","a typed transaction","untyped transaction view","","","","","","","the blob identifier for the data referred to by this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","id identifer","id identifer","id identifer","","","","","","","","Length of the unencrypted blob data","","create a new data transaction from a <code>ChainId</code>, a len, a …","create a new revocation transaction.","","a record hint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transaction type","transaction type","transaction type","","","convert transaction type into its associated number value.","","","","","","","","","A blob identifier used to refer to a [<code>SealedBlob</code>]","A chain identifier.  Used to identify a transaction.","Client Id type used to identify a client.","A generic Id type used as the underlying type for the …","a record hint.  Used as a hint to what this data is used …","A record identifier.  Contains a <code>ChainId</code> which refers to …","a big endian encoded number used as a counter.","Vault Id type used to identify a vault.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","load <code>RecordId</code> from a buffer of bytes.","load <code>ClientId</code> from a buffer of bytes.","load <code>VaultId</code> from a buffer of bytes.","Loads a <code>ChainId</code> from a buffer of bytes.","load <code>Id</code> from a buffer of bytes.","","","","","","","","","create a new random Id for hint","","","","","","","","","Generates a random <code>RecordId</code>","Generates a random <code>ClientId</code>","Generates a random <code>VaultId</code>","Generates a random <code>ChainId</code>","Generates a random <code>Id</code>","Generates a random <code>BlobId</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","converts a val to a u64.","A view over the data inside of a collection of <code>Vault</code> …","A bit of data inside of a <code>Vault</code>.","A enclave of data that is encrypted under one <code>Key</code>.","Adds a new <code>Record</code> to the <code>Vault</code> if the <code>Record</code> doesn’t …","encrypted data in blob format.","","","","","","","Check to see if a <code>RecordId</code> pairs with the <code>Record</code>. Comes …","Clears the entire <code>Vault</code> from memory.","","","","","","","Check to see if a <code>Vault</code> contains a <code>Record</code> through the …","Check if the <code>Vault</code> contains a <code>Record</code>","data transaction metadata.","","","","","","Access the decrypted <code>GuardedVec</code> of the specified <code>Record</code> …","","","","Sorts through all of the vault entries and garbage …","Garbage collect a <code>Vault</code>. Deletes any records that contain …","Get the blob from this <code>Record</code>.","Get access the decrypted <code>GuardedVec</code> of the specified …","Gets the decrypted <code>GuardedVec</code> from the <code>Record</code>","gets the <code>RecordHint</code> and <code>RecordId</code> of the <code>Record</code>.","record id.","Initialize a new <code>Vault</code> if it doesn’t exist.","Initialize a new <code>Vault</code>","","","","","Lists all of the <code>RecordHint</code> values and <code>RecordId</code> values …","List the <code>RecordHint</code> values and <code>RecordId</code> values of the …","Create a new <code>DbView</code> to interface with the <code>Vault</code> types in …","","Revokes an <code>Record</code> by its <code>ChainId</code>.  Does nothing if the …","","revocation transaction metadata.","Add a revocation transaction to the <code>Record</code>","","","","","","","","","","","","","","","","Update the data in an existing <code>Record</code>.","A hashmap of the <code>Vault</code> types.","Write a new record to a <code>Vault</code>. Will instead update a …"],"i":[0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,3,3,3,0,2,0,2,3,2,3,2,3,2,3,3,3,2,3,2,3,2,3,0,4,4,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,5,5,5,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,6,0,6,0,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,9,10,11,12,13,0,0,0,0,0,0,0,0,0,0,0,0,14,0,15,16,16,16,16,0,17,14,16,0,0,0,0,0,18,15,18,18,18,18,18,18,18,17,18,18,18,18,0,0,0,0,14,14,14,16,16,16,16,14,14,14,14,19,19,14,20,20,14,14,14,14,14,14,14,14,14,16,16,16,14,14,14,14,14,0,0,0,0,21,22,23,24,25,26,0,26,0,0,0,0,0,0,0,0,23,24,25,23,24,25,27,26,23,28,27,29,24,25,26,23,28,27,29,24,25,26,23,24,25,26,23,24,25,26,23,23,24,25,23,24,25,23,24,25,26,23,26,23,28,27,29,26,23,28,27,29,24,24,24,25,25,25,26,23,28,27,29,26,23,28,27,29,24,25,27,23,27,29,26,27,23,24,25,26,23,24,25,26,26,23,23,28,27,29,24,25,26,23,28,27,29,24,25,30,26,23,28,27,27,29,29,24,25,28,27,29,23,23,26,8,9,10,11,12,13,31,32,0,0,0,0,0,0,0,0,32,32,8,10,11,12,13,31,8,9,10,11,12,13,31,32,8,9,10,11,12,13,31,32,8,9,10,11,12,13,31,32,8,9,10,11,12,13,31,32,8,9,10,11,12,13,31,32,10,13,8,9,10,11,12,13,31,8,10,11,12,13,31,8,10,11,12,13,31,8,9,10,11,12,13,31,32,8,9,9,10,11,12,13,31,32,8,8,9,10,11,12,13,31,32,32,8,9,10,11,12,13,31,32,8,9,10,10,10,11,11,11,12,13,31,32,9,10,11,12,13,8,9,10,11,12,13,31,32,8,8,9,10,11,12,13,31,32,9,10,11,12,13,31,8,9,10,11,12,13,31,8,9,10,11,12,13,31,32,9,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,31,31,32,8,9,10,11,12,13,31,32,8,9,10,11,12,13,31,32,32,0,0,0,33,34,35,33,34,35,33,34,34,35,35,33,34,35,33,34,35,33,34,35,35,33,34,33,35,35,33,34,33,35,34,35,33,34,34,35,33,35,33,34,33,35,33,35,34,33,34,34,35,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,34,35,35],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]]],[[["error",4]]],[[]],[[["tryfromsliceerror",3]]],[[]],null,[[],[["option",4,["error"]],["error",8]]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],[["vec",3,["u8"]],["u8",15]]],null,[[],[["vec",3,["u8"]],["result",6,["vec"]]]],null,null,null,[[["key",6]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[["path",3],["key",6]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[["key",6]],["result",6]],[[["path",3],["key",6]],["result",6]],null,null,[[]],[[]],[[]],[[]],[[],["duplicate",3]],[[]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],["result",6]],[[],[["vec",3,["u8"]],["result",6,["vec"]]]],[[["vec",3]],["result",6]],[[["usize",15]]],[[]],null,[[]],[[["vec",3]]],null,[[],["result",6]],[[],[["result",6,["usize"]],["usize",15]]],[[],["result",6]],[[],[["u16",15],["result",6,["u16"]]]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[["vec",3]]],null,null,[[],[["option",4,["duplicate"]],["duplicate",3]]],[[]],[[["usize",15]],["u32",15]],[[],["u32",15]],[[],["usize",15]],null,[[]],[[]],null,[[],["block",3]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]]],[[["str",15],["option",4,["str"]]],[["result",6,["pathbuf"]],["pathbuf",3]]],[[],[["result",6,["pathbuf"]],["pathbuf",3]]],[[],[["result",6,["pathbuf"]],["pathbuf",3]]],[[["path",3]],["result",6]],[[],["result",6]],null,null,null,null,null,null,[[],["result",6]],[[["file",3]],["result",6]],[[["key",6]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[["path",3],["key",6]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[["key",6]],["result",6]],[[["path",3],["key",6]],["result",6]],null,null,null,null,null,null,null,null,[[]],[[]],null,[[],["value",3]],[[]],[[],["result",4]],null,[[["formatter",3]],["result",6]],[[]],[[["systemtime",3]],["bool",15]],[[]],[[["option",4,["duration"]],["duration",3]]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[],["cache",3]],[[]],[[],["bool",15]],[[["duration",3]]],null,[[]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[],["option",4]],[[],[["option",4,["systemtime"]],["systemtime",3]]],[[["option",4,["duration"]],["duration",3]]],[[],[["duration",3],["option",4,["duration"]]]],[[["option",4,["duration"]],["duration",3]],["option",4]],[[]],null,[[]],[[],["option",4]],null,[[],["result",4]],null,[[]],[[],["result",4]],[[],["result",4]],[[["systemtime",3]]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["string",3]],[[],["usize",15]],[[["key",3]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[],["usize",15]],[[["key",3]],[["vec",3,["u8"]],["result",6,["vec"]]]],null,[[],["result",6]],null,[[],["result",6]],null,null,null,null,null,null,[[],["string",3]],[[]],[[]],[[["u8",15]],[["result",6,["usize"]],["usize",15]]],[[],[["vec",3,["u8"]],["result",6,["vec"]]]],[[["usize",15]],["u8",15]],[[],["string",3]],[[]],[[],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[],["usize",15]],[[["key",3]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[],["usize",15]],[[["key",3]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[],["ordering",4]],[[["asref",8],["key",3]],["result",6]],[[["asref",8],["key",3]],["result",6]],[[],["result",4]],[[["asref",8],["key",3]],["result",6]],[[["asref",8],["key",3]],["result",6]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[["vec",3,["u8"]],["u8",15]],["result",6]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],["result",6]],[[],["result",6]],[[["usize",15]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[["usize",15]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["transactiontype",4]],[[],["transaction",3]],[[],["sealedtransaction",3]],[[],["sealedblob",3]],[[]],[[]],[[]],[[]],[[["transactiontype",4]],["ordering",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["transactiontype",4]],["bool",15]],[[["transaction",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,["u8"]],["u8",15]]],[[]],[[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["transaction",3]],["bool",15]],[[["u64",15],["blobid",3],["recordhint",3],["chainid",3]],["transaction",3]],[[["chainid",3]],["transaction",3]],[[["transactiontype",4]],[["option",4,["ordering"]],["ordering",4]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["val",3]],["result",4]],[[["vec",3,["u8"]],["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["val",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["val",3]],[[],["typeid",3]],[[],["val",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["option",4]],[[],["untypedtransaction",3]],[[],["val",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["recordhint",3]],[[],["recordid",3]],[[],["clientid",3]],[[],["vaultid",3]],[[],["chainid",3]],[[],["id",3]],[[],["blobid",3]],[[],["val",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["recordhint",3]],["ordering",4]],[[["recordid",3]],["ordering",4]],[[["clientid",3]],["ordering",4]],[[["vaultid",3]],["ordering",4]],[[["chainid",3]],["ordering",4]],[[["id",3]],["ordering",4]],[[["blobid",3]],["ordering",4]],[[],["ordering",4]],[[],["clientid",3]],[[],["id",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["recordhint",3]],["bool",15]],[[["recordid",3]],["bool",15]],[[["clientid",3]],["bool",15]],[[["vaultid",3]],["bool",15]],[[["chainid",3]],["bool",15]],[[["id",3]],["bool",15]],[[["blobid",3]],["bool",15]],[[["val",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["string",3]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["string",3]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["recordhint",3]],["bool",15]],[[["recordid",3]],["bool",15]],[[["clientid",3]],["bool",15]],[[["vaultid",3]],["bool",15]],[[["chainid",3]],["bool",15]],[[["id",3]],["bool",15]],[[["blobid",3]],["bool",15]],[[["val",3]],["bool",15]],[[],["result",6]],[[["recordhint",3]],[["option",4,["ordering"]],["ordering",4]]],[[["recordid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["clientid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["vaultid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["chainid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["id",3]],[["option",4,["ordering"]],["ordering",4]]],[[["blobid",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec",3,["u8"]],["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec",3,["u8"]],["u8",15]],["result",4]],[[["vec",3,["u8"]],["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec",3,["u8"]],["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec",3,["u8"]],["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u64",15]],null,null,null,[[["recordhint",3],["key",3],["chainid",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["recordid",3]],["bool",15]],[[],["result",6]],[[],["dbview",3]],[[],["vault",3]],[[],["record",3]],[[]],[[]],[[]],[[["vaultid",3],["key",3],["recordid",3]],["bool",15]],[[["key",3],["recordid",3]],["bool",15]],null,[[],["dbview",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["vaultid",3],["key",3],["recordhint",3],["recordid",3]],["result",6]],[[]],[[]],[[]],[[]],[[["vaultid",3],["key",3]],["result",6]],[[["chainid",3],["key",3]],[["guardedvec",3,["u8"]],["result",6,["guardedvec"]]]],[[["vaultid",3],["key",3],["recordid",3]],["result",6]],[[["chainid",3],["key",3]],[["guardedvec",3,["u8"]],["result",6,["guardedvec"]]]],[[["key",3]],["option",4]],null,[[["vaultid",3],["key",3]],["result",6]],[[["key",3]],[["vault",3],["result",6,["vault"]]]],[[]],[[]],[[]],null,[[["vaultid",3],["key",3]],["vec",3]],[[["key",3]],["vec",3]],[[],["dbview",3]],[[["blobid",3],["key",3],["recordhint",3],["chainid",3]],[["record",3],["result",6,["record"]]]],[[["chainid",3],["key",3]],["result",6]],[[["chainid",3],["key",3]],["result",6]],null,[[["vaultid",3],["key",3],["recordid",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["chainid",3],["key",3]],["result",6]],null,[[["vaultid",3],["key",3],["recordhint",3],["recordid",3]],["result",6]]],"p":[[4,"Error"],[3,"Block"],[3,"Duplicate"],[3,"Lz4Decoder"],[3,"Lz4Encoder"],[3,"Cache"],[3,"Value"],[3,"RecordHint"],[3,"RecordId"],[3,"ClientId"],[3,"VaultId"],[3,"ChainId"],[3,"Id"],[3,"Key"],[8,"Base64Encodable"],[8,"BoxProvider"],[8,"Base64Decodable"],[3,"Base64"],[8,"Decrypt"],[8,"Encrypt"],[8,"AsView"],[8,"AsViewMut"],[3,"Transaction"],[3,"SealedTransaction"],[3,"SealedBlob"],[4,"TransactionType"],[3,"DataTransaction"],[3,"UntypedTransaction"],[3,"RevocationTransaction"],[8,"TypedTransaction"],[3,"BlobId"],[3,"Val"],[3,"Vault"],[3,"Record"],[3,"DbView"]]},\
"iota_stronghold":{"doc":"","t":[12,12,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,6,13,13,13,4,13,13,4,4,3,3,3,6,4,13,13,4,13,13,13,6,3,4,4,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,11,11,11,14,11,11,5,11,11,12,11,0,11,11,11,11,12,11,11,5,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,0,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,3,3,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,0,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,13,13,13,13,13,3,13,13,13,13,3,3,3,3,13,13,13,13,3,3,3,3,3,3,3,4,4,3,3,3,13,3,3,3,3,3,13,13,13,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,4,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,4,6,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,13,13,13,13,3,13,13,13,3,3,13,13,13,3,13,13,13,13,13,13,4,4,13,13,13,3,3,4,3,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,4,11,11,11,11,11,11,0,0,11,11,11,11,11,3,3,3,11,11,11,11,11,11,12,11,12,12,12,11,11,11,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,12,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,0,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,3,13,13,4,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,0,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,6,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,0,5,0,8,10,13,13,13,13,4,18,13,4,6,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["0","0","BIP39Generate","BIP39Generate","BIP39MnemonicSentence","BIP39MnemonicSentence","BIP39Recover","BIP39Recover","Counter","Ed25519PublicKey","Ed25519PublicKey","Ed25519Sign","Ed25519Sign","EngineError","Error","Error","Error","Generic","IDError","IdConversionError","IsReadable","Key","Key","KeyStoreError","LoadClientByPathError","Location","Ok","PathError","ProcResult","Procedure","Provider","RecordHint","RecordId","Result","ResultMessage","SLIP10Derive","SLIP10Derive","SLIP10DeriveInput","SLIP10Generate","SLIP10Generate","Seed","StatusMessage","Stronghold","StrongholdFlags","VaultFlags","actors","as_ref","base64","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deserialize","deserialize","encode_hex","encode_hex_upper","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","home_dir","interface","internals","into","into","into","line_error","load","load_from_path","naive_kdf","ne","ne","network_actor","new","p2p","partial_cmp","partial_cmp","protocol_name","random","registry","serialize","serialize","snapshot_dir","source","state","target","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap_or_err","unwrap_result_msg","utils","vzip","vzip","vzip","counter","record_path","vault_path","vault_path","chain","hint","hint","hint","hint","input","mnemonic","msg","output","output","output","output","passphrase","passphrase","private_key","private_key","seed","size_bytes","p2p","registry","secure","snapshot","NetworkActor","NetworkConfig","borrow","borrow","borrow_mut","borrow_mut","client","connection_timeout","connections_limit","default","from","from","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","inbound_request_rx","into","into","keypair","messages","network","new","request_timeout","started","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_connection_timeout","with_connections_limit","with_keypair","with_request_timeout","AddDialingRelay","AddPeerAddr","Bool","CallProcedure","CheckRecord","CheckVault","ClearCache","ConnectPeer","CreateVault","DeleteFromStore","Empty","GarbageCollect","GetFirewallDefault","GetFirewallRules","GetPeerAddrs","GetSwarmInfo","List","ListIds","Proc","ReadFromStore","RemoveDialingRelay","RemoveFirewallDefault","RemoveFirewallRule","RemovePeerAddr","SendRequest","SetFirewallDefault","SetFirewallRule","ShRequest","ShResult","Shutdown","StartListening","StartListeningRelay","Status","StopListening","StopListeningAddr","StopListeningRelay","SwarmInfo","SwitchClient","Vector","WriteToStore","WriteToVault","address","address","address","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client","clone","clone","clone_into","clone_into","connections","deserialize","deserialize","direction","direction","direction","direction","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","listeners","local_peer_id","peer","peer","peer","peer","peer","peer","peer","peer","relay","relay","relay","relay","relay_addr","request","rule","rule","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ClientAlreadyPresentById","NoClientPresentById","Registry","RegistryError","borrow","borrow","borrow_mut","borrow_mut","clients","default","fmt","fmt","from","from","handle","handle","handle","handle","handle","handle","into","into","messages","snapshot","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","GetAllClients","GetClient","GetSnapshot","HasClient","InsertClient","RemoveClient","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","id","id","id","id","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","AccessError","GarbageCollectError","ListError","NoSnapshotPresent","NotExisting","NotExisting","RevocationError","SnapshotError","Store","StoreError","VaultError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","into","into","into","messages","procedures","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","CheckRecord","CheckVault","ClearCache","CreateVault","DeleteFromStore","GarbageCollect","GetData","ListIds","ReadFromStore","ReloadData","RevokeData","Terminate","WriteToStore","WriteToVault","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hint","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lifetime","location","location","location","location","location","location","location","location","payload","payload","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vault_path","vault_path","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BIP39Generate","BIP39Generate","BIP39Generate","BIP39Generate","BIP39MnemonicSentence","BIP39MnemonicSentence","BIP39MnemonicSentence","BIP39Recover","BIP39Recover","BIP39Recover","BIP39Recover","CallProcedure","Ed25519PublicKey","Ed25519PublicKey","Ed25519PublicKey","Ed25519PublicKey","Ed25519Sign","Ed25519Sign","Ed25519Sign","Ed25519Sign","Error","Error","Key","ProcResult","Procedure","SLIP10Derive","SLIP10Derive","SLIP10Derive","SLIP10DeriveFromKey","SLIP10DeriveFromSeed","SLIP10DeriveInput","SLIP10Generate","SLIP10Generate","SLIP10Generate","SLIP10Generate","Seed","SerdeProcResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chain","child_record_id","child_vault_id","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","hint","hint","hint","hint","hint","into","into","into","into","into","into","into","into","into","into","into","into","key_record_id","key_vault_id","mnemonic","msg","parent_record_id","parent_vault_id","passphrase","passphrase","proc","record_id","record_id","record_id","record_id","record_id","seed_record_id","seed_vault_id","serialize","serialize","serialize","serialize","serialize","size_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vault_id","vault_id","vault_id","vault_id","vault_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","chain","hint","hint","hint","hint","input","mnemonic","msg","output","output","output","output","passphrase","passphrase","private_key","private_key","seed","size_bytes","LoadFailure","SnapshotError","borrow","borrow_mut","fmt","fmt","from","into","messages","returntypes","to_string","try_from","try_into","type_id","vzip","FillSnapshot","ReadFromSnapshot","WriteSnapshot","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","default","fid","filename","filename","from","from","from","id","id","into","into","into","key","key","path","path","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReturnReadSnapshot","borrow","borrow_mut","data","from","id","into","try_from","try_into","type_id","vzip","Stronghold","add_peer","borrow","borrow_mut","check_config_flags","clone","clone_into","delete_data","delete_from_store","from","garbage_collect","get_swarm_info","init_stronghold_system","into","kill_stronghold","list_hints_and_ids","list_remote_hints_and_ids","network_actor","read_from_remote_store","read_from_store","read_snapshot","record_exists","registry","remote_runtime_exec","remove_firewall_rules","remove_relay","runtime_exec","set_firewall_rule","spawn_p2p","spawn_stronghold_actor","start_listening","stop_listening","stop_p2p","switch_actor_target","target","to_owned","try_from","try_into","type_id","vault_exists","vzip","write_all_to_snapshot","write_remote_vault","write_to_remote_store","write_to_store","write_to_vault","provider","NONCE_LEN","Provider","TAG_LEN","borrow","borrow_mut","box_key_len","box_open","box_overhead","box_seal","clone","clone_into","cmp","default","deserialize","eq","fmt","from","into","partial_cmp","random_buf","serialize","to_owned","try_from","try_into","type_id","vzip","AllowAll","Ask","Multiaddr","NetworkConfig","PeerId","RejectAll","Restricted","Rule","SwarmInfo","as_ref","as_ref","base64","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","connection_timeout","connections","connections_limit","deserialize","empty","encode_hex","encode_hex_upper","ends_with","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_iter","from_multihash","from_public_key","from_str","from_str","hash","hash","into","into","into","is_empty","is_public_key","iter","keypair","len","listeners","local_peer_id","multihash","ne","ne","partial_cmp","partial_cmp","pop","protocol_name","push","random","replace","request_timeout","serialize","to_base58","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with","with_capacity","_maker","restriction","key_store","secure","snapshot","KeyStore","borrow","borrow_mut","clear_keys","create_key","from","get_data","insert_key","into","new","rebuild_keystore","store","take_key","try_from","try_into","type_id","vault_exists","vzip","SecureClient","Store","borrow","borrow_mut","client_id","db","derive_record_id","derive_vault_id","from","get_client_str","get_index_from_record_id","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","into","keystore","new","read_from_store","rebuild_cache","resolve_location","set_client_id","store","store_delete_item","store_key_exists","try_from","try_into","type_id","vzip","write_to_store","0","Snapshot","SnapshotState","add_data","borrow","borrow","borrow_mut","borrow_mut","default","default","deserialize","deserialize","from","from","get_state","handle","handle","handle","has_data","into","into","new","new","read_from_snapshot","serialize","serialize","state","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_snapshot","ids","index_of_unchecked","types","LoadFromPath","load_from_path","Counter","Error","Generic","IsReadable","Location","OK","Ok","ResultMessage","StatusMessage","StrongholdFlags","VaultFlags","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","const_counter","const_generic","counter","deserialize","deserialize","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","generic","into","into","into","into","is_err","is_ok","ne","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vault_path","vzip","vzip","vzip","vzip","counter","record_path","vault_path","vault_path"],"q":["iota_stronghold","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::Location","","","","iota_stronghold::Procedure","","","","","","","","","","","","","","","","","","iota_stronghold::actors","","","","iota_stronghold::actors::p2p","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::actors::p2p::messagesiota_stronghold::actors::registry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::actors::registry::messages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::actors::secure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::actors::secure::messagesiota_stronghold::actors::secure::proceduresiota_stronghold::actors::secure::procedures::Procedure","","","","","","","","","","","","","","","","","","iota_stronghold::actors::snapshot","","","","","","","","","","","","","","","iota_stronghold::actors::snapshot::messages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::actors::snapshot::returntypes","","","","","","","","","","","iota_stronghold::interface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::internals","iota_stronghold::internals::provider","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::p2p","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::p2p::Rule","","iota_stronghold::state","","","iota_stronghold::state::key_store","","","","","","","","","","","","","","","","","","iota_stronghold::state::secure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::state::snapshot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::utils","","","iota_stronghold::utils::ids","","iota_stronghold::utils::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iota_stronghold::utils::types::Location","","",""],"d":["","","Generate a BIP39 seed and its corresponding mnemonic …","<code>BIP39Generate</code> return value.","Read a BIP39 seed and its corresponding mnemonic sentence …","<code>BIP39MnemonicSentence</code> return value. Returns the mnemonic …","Use a BIP39 mnemonic sentence (optionally protected by a …","<code>BIP39Recover</code> return value.","","Derive an Ed25519 public key from the corresponding …","Return value for <code>Ed25519PublicKey</code>. Returns an Ed25519 …","Use the specified Ed25519 compatible key to sign the …","Return value for <code>Ed25519Sign</code>. Returns an Ed25519 …","","Stronghold Client error block.","Generic Error return message.","","","","","","Key type alias.","","","","A <code>Location</code> type used to specify where in the <code>Stronghold</code> a …","","","","for old client (cryptographic) procedure calling","An implementation of the Vault’s <code>BoxProvider</code> type.  …","a record hint.  Used as a hint to what this data is used …","A record identifier.  Contains a <code>ChainId</code> which refers to …","Stronghold Client Result Type.","Return value used for Actor Messages.  Can specify an …","Derive a SLIP10 child key from a seed or a parent key, …","Returns the public key derived from the <code>SLIP10Derive</code> call.","","Generate a raw SLIP10 seed of the specified size (in …","Return from generating a <code>SLIP10</code> seed.","Note that BIP39 seeds are allowed to be used as SLIP10 …","A type alias for the empty <code>ResultMessage<()></code> type.","The main type for the Stronghold System.  Used as the …","Policy options for modifying an entire Stronghold.  Must …","Policy options for for a specific vault.  Must be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the preferred Stronghold home directory","Main Stronghold Interface","","","","","TODO: Should be replaced with proper errors.","load <code>RecordId</code> from a buffer of bytes.","","a wrapper around the [<code>HMAC_SHA256</code>] function used to …","","","","create a new random Id for hint","","","","","Generates a random <code>RecordId</code>","","","","Get the preferred snapshot directory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Registry Actor","Secure Actor module","","","Default behaviour:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the timeout for a idle connection to a remote peer.","Set the limit for simultaneous connections. By default no …","Set the keypair that is used for authenticating the …","Set a timeout for receiving a response after a request …egistry <code>Actor</code>, that owns [<code>Client</code>] actors, and manages …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Store typedef on <code>engine::store::Cache</code>","","","","","","","","","","","","","","","","","","","","","Message types for [<code>SecureClientActor</codeenerate a BIP39 seed and its corresponding mnemonic …","<code>BIP39Generate</code> return value.","","Read a BIP39 seed and its corresponding mnemonic sentence …","<code>BIP39MnemonicSentence</code> return value. Returns the mnemonic …","","","Use a BIP39 mnemonic sentence (optionally protected by a …","<code>BIP39Recover</code> return value.","","","","Derive an Ed25519 public key from the corresponding …","Return value for <code>Ed25519PublicKey</code>. Returns an Ed25519 …","","","Use the specified Ed25519 compatible key to sign the …","Return value for <code>Ed25519Sign</code>. Returns an Ed25519 …","","Generic Error return message.","","","","for old client (cryptographic) procedure calling","Derive a SLIP10 child key from a seed or a parent key, …","Returns the public key derived from the <code>SLIP10Derive</code> call.","","","","","","Generate a raw SLIP10 seed of the specified size (in …","Return from generating a <code>SLIP10</code> seed.","","Note that BIP39 seeds are allowed to be used as SLIP10 …eturn type for loaded snapshot file","","","","","","","","","","","The main type for the Stronghold System.  Used as the …","Add dial information for a remote peers. This will …","","","Unimplemented until Policies are implemented.","","","Revokes the data from the specified location of type …","A method to delete data from an insecure cache. This …","","Garbage collects any revokes in a Vault based on the …","Get the peer id, listening addresses and connection info …","Initializes a new instance of the system asynchronously.  …","","Used to kill a stronghold actor or clear the cache of the …","Returns a list of the available <code>RecordId</code> and <code>RecordHint</code> …","Returns a list of the available records and their …","","Read from the store of a remote Stronghold. It is …","A method that reads from an insecure cache.  This method, …","Reads data from a given snapshot file.  Can only read the …","Checks whether a record exists in the client based off of …","","Executes a runtime command at a remote Stronghold. It is …","Remove peer specific rules from the firewall …","Remove a peer from the list of peers used for dialing, …","Executes a runtime command given a <code>Procedure</code>.  Returns a …","Change the firewall rule for specific peers, optionally …","Spawn the p2p-network actor and swarm.","Spawns a new set of actors for the Stronghold system. …","Start listening on the swarm to the given address. If not …","Stop listening on the swarm.","Gracefully stop the network actor and swarm.","Switches the actor target to another actor in the system …","","","","","","checks whether a vault exists in the client.","","Writes the entire state of the <code>Stronghold</code> into a …","Write to the vault of a remote Stronghold. It is required …","Write to the store of a remote Stronghold. It is required …","Writes data into an insecure cache.  This method, accepts …","Writes data into the Stronghold. Uses the current target …","","Nonce length.","An implementation of the Vault’s <code>BoxProvider</code> type.  …","Tag Length.","","","Key size.","Decrypts the data using the xchacha20-poly1305 algorithm.","Nonce length plus Tag length.","Encrypts the data using the xchacha20-poly1305 algorithm.","","","","","","","","","","","fills a buffer with random bytes.","","","","","","","Allow all requests","Ask for individual approval for each request by sending a …","Representation of a Multiaddr.","Default behaviour:","Identifier of a peer of the network.","Reject all requests","Approve /  Reject request based on the set function.","Rules for requests in a specific <code>RequestDirection</code>.","","","","","","","","","","","","","","","","","","","","","","","","Create a new, empty multiaddress.","","","Checks whether the given <code>Multiaddr</code> is a suffix of this …","","","","","Convert a Multiaddr to a string","","","","","","","","","","","Parses a <code>PeerId</code> from bytes.","","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.","Builds a <code>PeerId</code> from a public key.","","","","","","","","Returns true if the length of this multiaddress is 0.","Checks whether the public key passed as parameter matches …","Returns the components of this multiaddress.","","Return the length in bytes of this multiaddress.","","","","","","","","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …","","Adds an already-parsed address component to the end of …","Generates a random peer ID from a cryptographically …","Replace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.","","","Returns a base-58 encoded string of this <code>PeerId</code>.","Returns a raw bytes representation of this <code>PeerId</code>.","","","","","","Return a copy of this <code>Multiaddr</code>’s byte representation.","","","","","","","","","","","","","","","","","","Like <code>Multiaddr::push</code> but consumes <code>self</code>.","Create a new, empty multiaddress with the given capacity.","","","","Secure Client Actor State","","","","","Clear the key store.","Returns an existing key for the <code>id</code> or creates one.","","Gets the state data in a hashmap format for the snapshot.","Inserts a key into the <code>KeyStore</code> by <code>VaultId</code>.  If the …","","Creates a new <code>KeyStore</code>.","Rebuilds the <code>KeyStore</code> while throwing out any existing …","","Gets the key from the <code>KeyStore</code> and removes it.  Returns …","","","","Checks to see if the vault exists.","","","Cache type definition","","","","","Derives the counter <code>RecordId</code> from the given vault path …","Gets the <code>VaultId</code> from a specified path.","","Gets the client string.","Gets the current index of a record if its a counter.","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new Client given a <code>ClientID</code> and …","Attempts to read the data from the store.  Returns […","Rebuilds the cache using the parameters.","Resolves a location to a <code>VaultId</code> and a <code>RecordId</code>","Sets the client id to swap from one client to another.","","Deletes an item from the store by the given key.","Checks to see if the key exists in the store.","","","","","Write unencrypted data to the store.  Returns <code>None</code> if the …","","Wrapper for the <code>SnapshotState</code> data structure.","Data structure that is written to the snapshot.","Adds data to the snapshot state hashmap.","","","","","","","","Deserializes the snapshot state from bytes.","","","Gets the state component parts as a tuple.","This will try to read from a snapshot on disk, otherwise …","","","Checks to see if the <code>ClientId</code> exists in the snapshot …","","","Creates a new <code>Snapshot</code> from a buffer of <code>SnapshotState</code> …","Creates a new snapshot state.","Reads state from the specified named snapshot or the …","","Serializes the snapshot state into bytes.","","","","","","","","","","Writes state to the specified named snapshot or the …","","Gets the index of a slice.","","A trait that allows a datatype to load and setup its …","Load from some data and a path.","","","","","A <code>Location</code> type used to specify where in the <code>Stronghold</code> a …","","","Return value used for Actor Messages.  Can specify an …","A type alias for the empty <code>ResultMessage<()></code> type.","Policy options for modifying an entire Stronghold.  Must …","Policy options for for a specific vault.  Must be …","","","","","","","","","","","","","","","","","","used to generate a constant counter location.","Used to generate a constant generic location.","Creates a counter location from a type that implements …","","","","","","","","","","","","","","Creates a generic location from types that implement …","","","","","Returns true, if the <code>ResultMessage</code> contains an <code>Error</code>","Returns true, if the <code>ResultMessage</code> contains an <code>Ok</code> value","","","","","","","","","","","","","","","","","","","","Gets the vault_path from the Location.","","","","","","","",""],"i":[1,2,3,4,3,4,3,4,5,3,4,3,4,6,0,4,7,5,6,6,8,0,9,6,6,0,7,6,0,0,0,0,0,0,0,3,4,0,3,4,9,0,0,0,0,0,1,1,6,1,2,6,1,2,1,2,1,2,1,2,1,2,1,1,1,2,6,6,1,2,2,6,6,1,1,2,1,2,0,0,0,6,1,2,0,2,2,0,1,2,10,1,0,1,2,1,2,10,1,2,0,6,0,10,1,2,6,2,6,1,2,2,2,6,1,2,6,1,2,0,0,0,6,1,2,11,12,12,11,13,14,13,15,16,13,15,17,14,13,15,16,15,16,18,17,19,14,0,0,0,0,0,0,20,21,20,21,20,21,21,21,20,21,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,0,20,20,21,20,20,21,20,21,20,21,20,21,21,21,21,21,0,0,22,23,23,23,23,0,23,23,22,23,0,0,0,0,22,23,22,23,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,22,23,23,24,25,26,27,28,29,30,31,24,32,33,25,34,35,36,37,38,39,40,41,42,26,27,43,44,45,23,22,28,29,30,31,24,32,33,25,34,35,36,37,38,39,40,41,42,26,27,43,44,45,23,22,29,23,22,23,22,28,23,22,37,38,40,41,28,29,30,31,24,32,33,25,34,35,36,37,38,39,40,41,42,26,27,43,44,45,23,23,23,23,23,23,23,23,23,23,23,23,22,22,22,22,22,22,22,28,29,30,31,24,32,33,25,34,35,36,37,38,39,40,41,42,26,27,43,44,45,23,22,28,28,30,35,39,40,41,42,26,27,32,34,43,44,32,30,37,40,23,22,23,22,28,29,30,31,24,32,33,25,34,35,36,37,38,39,40,41,42,26,27,43,44,45,23,22,28,29,30,31,24,32,33,25,34,35,36,37,38,39,40,41,42,26,27,43,44,45,23,22,28,29,30,31,24,32,33,25,34,35,36,37,38,39,40,41,42,26,27,43,44,45,23,22,28,29,30,31,24,32,33,25,34,35,36,37,38,39,40,41,42,26,27,43,44,45,23,22,46,46,0,0,46,47,46,47,47,47,46,46,46,47,47,47,47,47,47,47,46,47,0,47,46,46,47,46,47,46,47,46,47,0,0,0,0,0,0,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,54,54,54,55,54,56,54,0,0,0,0,54,56,55,54,56,55,54,54,56,56,55,55,54,56,55,54,56,55,0,0,54,56,55,54,56,55,54,56,55,54,56,55,54,56,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,58,59,60,61,62,63,64,65,66,67,68,69,70,57,58,59,60,61,62,63,64,65,66,67,68,69,70,58,59,60,61,62,63,64,65,66,67,68,69,70,58,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,58,59,60,61,62,63,64,65,66,67,68,69,70,57,58,59,60,61,62,63,64,65,66,67,68,69,70,61,59,57,58,59,60,61,62,63,64,65,66,67,68,69,70,68,60,61,62,63,65,68,69,70,61,68,60,61,62,63,64,65,66,67,68,69,70,58,59,60,61,62,63,64,65,66,67,68,69,70,57,58,59,60,61,62,63,64,65,66,67,68,69,70,57,58,59,60,61,62,63,64,65,66,67,68,69,70,57,58,59,60,61,62,63,64,65,66,67,68,69,70,64,67,57,58,59,60,61,62,63,64,65,66,67,68,69,70,0,3,4,71,3,4,71,0,3,4,71,0,0,3,4,71,0,3,4,71,4,71,9,0,0,3,4,71,0,0,0,0,3,4,71,9,0,3,4,71,72,73,74,75,76,77,78,79,9,3,4,71,72,73,74,75,76,77,78,79,9,74,75,75,75,3,4,71,72,73,74,75,76,77,78,79,9,3,4,71,72,73,74,75,76,77,78,79,9,3,4,71,72,9,4,72,73,74,75,76,77,78,79,9,3,4,71,71,72,73,74,75,76,77,78,79,9,73,74,75,76,77,3,4,71,72,73,74,75,76,77,78,79,9,74,74,77,79,75,75,76,77,72,73,76,77,78,79,74,74,3,4,71,72,9,73,3,4,71,72,73,74,75,76,77,78,79,9,3,4,4,71,72,73,74,75,76,77,78,79,9,3,4,71,72,73,74,75,76,77,78,79,9,3,4,71,72,73,74,75,76,77,78,79,9,73,76,77,78,79,3,4,71,72,73,74,75,76,77,78,79,9,13,14,13,15,16,13,15,17,14,13,15,16,15,16,18,17,19,14,80,0,80,80,80,80,80,80,0,0,80,80,80,80,80,0,0,0,81,82,83,81,82,83,82,83,83,81,83,81,82,83,82,83,81,82,83,81,83,81,83,81,82,83,81,82,83,81,82,83,81,82,83,0,84,84,84,84,84,84,84,84,84,84,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,85,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,0,0,0,86,86,0,0,87,88,87,86,87,88,86,87,88,87,86,87,88,86,87,88,87,88,21,28,21,87,87,87,87,87,87,88,86,87,87,88,88,86,87,87,87,87,87,88,88,88,87,88,88,87,88,87,88,86,87,88,87,88,87,21,87,28,28,88,87,88,87,88,87,87,87,88,87,21,87,88,88,86,87,88,87,88,87,86,87,87,87,87,88,88,88,86,87,88,86,87,88,86,87,88,87,87,89,89,0,0,0,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,0,0,92,93,92,93,92,93,92,92,92,93,92,93,93,93,93,93,93,92,93,92,93,92,92,93,93,92,93,92,93,92,93,92,93,0,0,0,0,94,5,7,5,8,0,7,7,0,0,0,0,5,7,5,8,95,7,5,8,95,7,5,8,95,7,5,8,95,5,5,5,7,5,7,7,5,8,95,7,7,7,5,8,95,5,7,5,8,95,7,7,7,7,5,7,5,8,95,7,5,8,95,7,5,8,95,7,5,8,95,5,7,5,8,95,11,12,12,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["recordhint",3]],[[],["recordid",3]],[[]],[[]],[[["recordhint",3]],["ordering",4]],[[["recordid",3]],["ordering",4]],[[],[["result",4,["recordhint"]],["recordhint",3]]],[[],[["result",4,["recordid"]],["recordid",3]]],[[]],[[]],[[["recordhint",3]],["bool",15]],[[["recordid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["error",4]]],[[],["recordhint",3]],[[]],[[]],[[]],[[]],[[],[["result",4,["pathbuf","error"]],["pathbuf",3],["error",4]]],null,null,[[]],[[]],[[]],null,[[],[["error",4],["recordid",3],["result",4,["recordid","error"]]]],[[],["result",6]],[[],[["error",4],["result",4,["error"]]]],[[["recordhint",3]],["bool",15]],[[["recordid",3]],["bool",15]],null,[[],[["result",4,["recordhint","error"]],["recordhint",3],["error",4]]],null,[[["recordhint",3]],[["option",4,["ordering"]],["ordering",4]]],[[["recordid",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],[["error",4],["recordid",3],["result",4,["recordid","error"]]]],null,[[],["result",4]],[[],["result",4]],[[],[["result",4,["pathbuf","error"]],["pathbuf",3],["error",4]]],[[],[["option",4,["error"]],["error",8]]],null,null,[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["recordid"]],["recordid",3]]],[[["u8",15],["vec",3,["u8","global"]],["global",3]],[["result",4,["recordid"]],["recordid",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[["switchclient",3]]],[[["startlisteningrelay",3]]],[[["shresult",4],["receiverequest",3,["shrequest","shresult"]],["shrequest",4]]],[[["stoplistening",3]]],[[["startlistening",3]]],[[["removedialingrelay",3]]],[[["removefirewalldefault",3]]],[[["adddialingrelay",3]]],[[["removepeeraddr",3]]],[[["addpeeraddr",3]]],[[["connectpeer",3]]],[[["getpeeraddrs",3]]],[[["removefirewallrule",3]]],[[["shrequest",4],["setfirewallrule",3,["shrequest"]]]],[[["getswarminfo",3]]],[[["getfirewalldefault",3]]],[[["setfirewalldefault",3,["shrequest"]],["shrequest",4]]],[[["stoplisteningaddr",3]]],[[["stoplisteningrelay",3]]],[[["sendrequest",3]]],[[["getfirewallrules",3]]],null,[[]],[[]],null,null,null,[[["secureclient",3],["shrequest",4],["networkconfig",3],["rule",4,["shrequest"]],["addr",3,["secureclient"]]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["duration",3]]],[[["connectionlimits",3]]],[[["initkeypair",4]]],[[["duration",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["shrequest",4]],[[],["shresult",4]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["checkrecord",3]]],[[["deletefromstore",3]]],[[["listids",3]]],[[["createvault",3]]],[[["writetovault",3]]],[[["readfromstore",3]]],[[["callprocedure",3]]],[[]],[[["writetostore",3]]],[[["clearcache",3]]],[[["garbagecollect",3]]],[[["checkvault",3]]],[[]],[[["bool",15]]],[[["result",4,["error"]],["error",3]]],[[]],[[["result",4,["vec","error"]],["vec",3,["u8"]],["error",3]]],[[["vec",3],["result",4,["vec","error"]],["error",3]]],[[["procresult",4],["error",3],["result",4,["procresult","error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],null,[[],["registry",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["getsnapshot",3]]],[[["removeclient",3]]],[[["getclient",3]]],[[["insertclient",3]]],[[["hasclient",3]]],[[["getallclients",3]]],[[]],[[]],null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["terminate",3]],[[],["reloaddata",3]],[[],["createvault",3]],[[],["writetovault",3]],[[],["revokedata",3]],[[],["garbagecollect",3]],[[],["listids",3]],[[],["checkrecord",3]],[[],["clearcache",3]],[[],["checkvault",3]],[[],["writetostore",3]],[[],["readfromstore",3]],[[],["deletefromstore",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["procedure",4]],[[],["procresult",4]],[[],["serdeprocresult",4]],[[],["callprocedure",3]],[[],["slip10generate",3]],[[],["slip10derivefromseed",3]],[[],["slip10derivefromkey",3]],[[],["bip39generate",3]],[[],["bip39recover",3]],[[],["ed25519publickey",3]],[[],["ed25519sign",3]],[[],["slip10deriveinput",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["procresult",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["serdeprocresult",4]],[["tryfromsliceerror",3],["result",4,["tryfromsliceerror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["readfromsnapshot",3]],null,null,null,[[]],[[]],[[]],null,null,[[]],[[]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],null,[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[["peerid",3],["option",4,["multiaddr"]],["bool",15],["multiaddr",3]]],[[]],[[]],[[]],[[],["stronghold",3]],[[]],[[["location",4],["bool",15]]],[[["location",4]]],[[]],[[["vec",3,["u8"]],["u8",15]]],[[]],[[["u8",15],["vec",3,["u8"]],["vec",3,["strongholdflags"]],["strongholdflags",4]]],[[]],[[["vec",3,["u8"]],["u8",15],["bool",15]]],[[["into",8,["vec"]],["vec",3,["u8"]]]],[[["peerid",3],["into",8,["vec"]],["vec",3,["u8"]]]],null,[[["peerid",3],["location",4]]],[[["location",4]]],[[["u8",15],["pathbuf",3],["option",4,["vec"]],["vec",3,["u8"]],["option",4,["string"]],["string",3],["option",4,["pathbuf"]]]],[[["location",4]]],null,[[["peerid",3],["procedure",4]]],[[["vec",3,["peerid"]],["peerid",3]]],[[["peerid",3],["bool",15]]],[[["procedure",4]]],[[["peerid",3],["shrequest",4],["bool",15],["vec",3,["peerid"]],["rule",4,["shrequest"]]]],[[["networkconfig",3],["rule",4,["shrequest"]],["shrequest",4]]],[[["u8",15],["vec",3,["u8"]],["vec",3,["strongholdflags"]],["strongholdflags",4]]],[[["multiaddr",3],["option",4,["multiaddr"]]]],[[]],[[]],[[["vec",3,["u8"]],["u8",15]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["location",4]]],[[]],[[["pathbuf",3],["string",3],["option",4,["string"]],["option",4,["pathbuf"]]]],[[["peerid",3],["location",4],["u8",15],["recordhint",3],["vec",3,["u8"]],["vec",3,["vaultflags"]],["vaultflags",4]]],[[["peerid",3],["location",4],["u8",15],["option",4,["duration"]],["vec",3,["u8"]],["duration",3]]],[[["location",4],["u8",15],["option",4,["duration"]],["vec",3,["u8"]],["duration",3]]],[[["location",4],["u8",15],["recordhint",3],["vec",3,["vaultflags"]],["vec",3,["u8"]],["vaultflags",4]]],null,null,null,null,[[]],[[]],[[],["usize",15]],[[["key",3]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[],["usize",15]],[[["key",3]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[],["provider",3]],[[]],[[["provider",3]],["ordering",4]],[[],["provider",3]],[[],["result",4]],[[["provider",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["provider",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",6]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[],["multihash",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["rule",4]],[[],["multiaddr",3]],[[],["peerid",3]],[[]],[[]],[[]],[[["multiaddr",3]],["ordering",4]],[[["peerid",3]],["ordering",4]],null,null,null,[[],[["result",4,["multiaddr"]],["multiaddr",3]]],[[],["multiaddr",3]],[[]],[[]],[[["multiaddr",3]],["bool",15]],[[["multiaddr",3]],["bool",15]],[[["peerid",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["ipv4addr",3]],["multiaddr",3]],[[["ipaddr",4]],["multiaddr",3]],[[]],[[["ipv6addr",3]],["multiaddr",3]],[[["protocol",4]],["multiaddr",3]],[[]],[[["publickey",4]],["peerid",3]],[[],[["result",4,["peerid","error"]],["peerid",3],["error",4]]],[[],["multiaddr",3]],[[["multihash",3,["uint"]],["uint",3,["uint","b0"]]],[["peerid",3],["result",4,["peerid","multihash"]],["multihash",3,["uint"]]]],[[["publickey",4]],["peerid",3]],[[["str",15]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[["str",15]],[["result",4,["peerid"]],["peerid",3]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["publickey",4]],[["option",4,["bool"]],["bool",15]]],[[],["iter",3]],null,[[],["usize",15]],null,null,null,[[["multiaddr",3]],["bool",15]],[[["peerid",3]],["bool",15]],[[["multiaddr",3]],[["option",4,["ordering"]],["ordering",4]]],[[["peerid",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["protocol"]],["protocol",4]]],[[]],[[["protocol",4]]],[[],["peerid",3]],[[["usize",15]],[["option",4,["multiaddr"]],["multiaddr",3]]],null,[[],["result",4]],[[],["string",3]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],["result",4]],[[["u8",15],["vec",3,["u8","global"]],["global",3]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[["str",15]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[["string",3]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[],["result",4]],[[],["result",4]],[[["u8",15],["vec",3,["u8","global"]],["global",3]],[["peerid",3],["result",4,["peerid"]]]],[[["multihash",3,["uint"]],["uint",3,["uint","b0"]]],[["result",4,["peerid"]],["peerid",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["protocol",4]],["multiaddr",3]],[[["usize",15]],["multiaddr",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[["vaultid",3]],["key",3]],[[]],[[],[["vaultid",3],["key",3,["provider"]],["hashmap",3,["vaultid","key"]]]],[[["key",3,["provider"]],["provider",3],["vaultid",3]],["key",3]],[[]],[[]],[[["key",3,["provider"]],["hashmap",3,["vaultid","key"]],["vaultid",3]]],null,[[["vaultid",3]],[["key",3,["provider"]],["result",4,["key","error"]],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["vaultid",3]],["bool",15]],[[]],null,null,[[]],[[]],null,null,[[["vec",3,["u8"]],["usize",15],["asref",8,["vec"]]],["recordid",3]],[[["vec",3,["u8"]],["asref",8,["vec"]]],["vaultid",3]],[[]],[[],["string",3]],[[["vec",3,["u8"]],["asref",8,["vec"]],["recordid",3]],["usize",15]],[[["garbagecollect",3]]],[[["createvault",3]]],[[["bip39recover",3]]],[[["checkvault",3]]],[[["terminate",3]]],[[["clearcache",3]]],[[["reloaddata",3]]],[[["checkrecord",3]]],[[["readfromstore",3]]],[[["writetovault",3]]],[[["slip10generate",3]]],[[["getdata",3]]],[[["revokedata",3]]],[[["deletefromstore",3]]],[[["writetostore",3]]],[[["ed25519publickey",3]]],[[["listids",3]]],[[["ed25519sign",3]]],[[["callprocedure",3]]],[[["slip10derivefromseed",3]]],[[["slip10derivefromkey",3]]],[[["bip39generate",3]]],[[]],null,[[["clientid",3]]],[[["vec",3,["u8"]],["u8",15]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["vec",3,["u8"]],["clientid",3],["cache",3,["vec","vec"]]]],[[["location",4],["asref",8,["location"]]]],[[["clientid",3]]],null,[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["u8"]],["u8",15]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["option",4,["duration"]],["u8",15],["vec",3,["u8"]],["duration",3]],[["vec",3,["u8"]],["option",4,["vec"]]]],null,null,null,[[["clientid",3]]],[[]],[[]],[[]],[[]],[[],["snapshot",3]],[[],["snapshotstate",3]],[[],["result",4]],[[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[["clientid",3]]],[[["readfromsnapshot",3]]],[[["writesnapshot",3]]],[[["fillsnapshot",3]]],[[["clientid",3]],["bool",15]],[[]],[[]],[[["snapshotstate",3]]],[[["clientid",3]]],[[["key",6],["option",4,["str"]],["option",4,["path"]],["str",15],["path",3]],["result",6]],[[],["result",4]],[[],[["vec",3,["u8"]],["u8",15]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["key",6],["option",4,["str"]],["option",4,["path"]],["str",15],["path",3]],["result",6]],null,[[],["usize",15]],null,null,[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,[[],["location",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["resultmessage",4]],[[],["location",4]],[[],["strongholdflags",4]],[[],["vaultflags",4]],[[]],[[]],[[]],[[]],[[["vec",3,["u8"]],["u8",15],["usize",15]]],[[["vec",3,["u8"]],["u8",15]]],[[["into",8,["vec"]],["into",8,["usize"]],["usize",15],["vec",3,["u8"]]]],[[],["result",4]],[[],["result",4]],[[["resultmessage",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["result",4,["error"]],["error",3]]],[[]],[[["result",4,["string"]],["string",3]]],[[]],[[]],[[]],[[["into",8,["vec"]],["vec",3,["u8"]]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["resultmessage",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null],"p":[[3,"RecordHint"],[3,"RecordId"],[4,"Procedure"],[4,"ProcResult"],[4,"Location"],[4,"Error"],[4,"ResultMessage"],[4,"StrongholdFlags"],[4,"SLIP10DeriveInput"],[3,"Stronghold"],[13,"Counter"],[13,"Generic"],[13,"SLIP10Derive"],[13,"SLIP10Generate"],[13,"BIP39Recover"],[13,"BIP39Generate"],[13,"Ed25519Sign"],[13,"Ed25519PublicKey"],[13,"BIP39MnemonicSentence"],[3,"NetworkActor"],[3,"NetworkConfig"],[4,"ShResult"],[4,"ShRequest"],[3,"StartListening"],[3,"StopListeningAddr"],[3,"AddPeerAddr"],[3,"RemovePeerAddr"],[3,"SwarmInfo"],[3,"SwitchClient"],[3,"SendRequest"],[3,"GetSwarmInfo"],[3,"StartListeningRelay"],[3,"StopListening"],[3,"StopListeningRelay"],[3,"ConnectPeer"],[3,"GetFirewallDefault"],[3,"SetFirewallDefault"],[3,"RemoveFirewallDefault"],[3,"GetFirewallRules"],[3,"SetFirewallRule"],[3,"RemoveFirewallRule"],[3,"GetPeerAddrs"],[3,"AddDialingRelay"],[3,"RemoveDialingRelay"],[3,"Shutdown"],[4,"RegistryError"],[3,"Registry"],[3,"InsertClient"],[3,"RemoveClient"],[3,"GetClient"],[3,"HasClient"],[3,"GetSnapshot"],[3,"GetAllClients"],[4,"VaultError"],[4,"SnapshotError"],[4,"StoreError"],[3,"GetData"],[3,"Terminate"],[3,"ReloadData"],[3,"CreateVault"],[3,"WriteToVault"],[3,"RevokeData"],[3,"GarbageCollect"],[3,"ListIds"],[3,"CheckRecord"],[3,"ClearCache"],[3,"CheckVault"],[3,"WriteToStore"],[3,"ReadFromStore"],[3,"DeleteFromStore"],[4,"SerdeProcResult"],[3,"CallProcedure"],[3,"SLIP10Generate"],[3,"SLIP10DeriveFromSeed"],[3,"SLIP10DeriveFromKey"],[3,"BIP39Generate"],[3,"BIP39Recover"],[3,"Ed25519PublicKey"],[3,"Ed25519Sign"],[4,"SnapshotError"],[3,"WriteSnapshot"],[3,"FillSnapshot"],[3,"ReadFromSnapshot"],[3,"ReturnReadSnapshot"],[3,"Provider"],[4,"Rule"],[3,"Multiaddr"],[3,"PeerId"],[13,"Restricted"],[3,"KeyStore"],[3,"SecureClient"],[3,"SnapshotState"],[3,"Snapshot"],[8,"LoadFromPath"],[4,"VaultFlags"]]},\
"p2p":{"doc":"","t":[12,3,13,13,13,13,13,4,13,13,13,4,13,13,13,13,3,4,4,13,13,13,13,3,3,8,13,13,13,4,13,13,4,13,13,13,13,13,4,4,4,3,13,13,3,3,13,4,13,13,13,3,13,13,13,4,3,3,4,3,8,13,13,13,13,13,13,3,3,13,13,13,13,13,4,13,13,12,11,11,5,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,10,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,0,12,12,12,12,12,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,12,12,12,12,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,17,13,3,3,6,13,6,6,6,13,13,11,11,12,11,11,11,11,11,11,11,11,12,12,11,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,12,12,12,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,3,4,3,13,13,13,13,13,13,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,3,3,24,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,3,3,4,3,13,13,13,3,13,13,24,13,4,4,8,12,12,12,12,10,12,12,12,12,12,12,12,12,13,13,4,3,3,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,12,0,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,0,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,12,12,13,4,13,13,4,13,13,13,13,13,4,4,13,13,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,4,13,3,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,12,12,12,12,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,4,13,13,3,13,13,4,13,13,13,13,4,3,4,3,8,13,6,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,13,13,3,4,13,8,13,4,3,13,3,3,13,13,12,10,12,12,12,12,12,12,12,12,12,12],"n":["0","AuthenticKeypair","Authenticated","Banned","Banned","Block","BufferLatest","ChannelSinkConfig","ConnectionClosed","ConnectionClosed","ConnectionClosed","ConnectionErr","ConnectionEstablished","ConnectionLimit","ConnectionLimit","ConnectionLimit","ConnectionLimits","DialErr","DialError","DialFailure","DialRelay","DropLatest","Ed25519","EstablishedConnections","EventChannel","Executor","ExpiredListenAddr","IdKeys","Inbound","InboundFailure","InboundFailure","IncomingConnectionError","InitKeypair","InvalidAddress","InvalidAddress","InvalidPeerId","Io","Io","Keypair","ListenErr","ListenRelayErr","Listener","ListenerClosed","ListenerError","MessageProtocol","Multiaddr","MultiaddrNotSupported","NetworkEvent","NewListenAddr","NoAddresses","NoAddresses","NoiseKeypair","NotPermitted","NotPermitted","Outbound","OutboundFailure","PeerId","ReceiveRequest","RequestDirection","RequestId","RqRsMessage","Rsa","Secp256k1","Shutdown","Shutdown","Shutdown","Shutdown","StrongholdP2p","StrongholdP2pBuilder","Timeout","Timeout","Transport","Transport","Transport","TransportErr","UnreachableAddrs","UnsupportedProtocols","addrs","as_ref","as_ref","assemble_relayed_addr","behaviour","behaviour_config","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","bytes","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","command_tx","connections","connections_limit","default","default","deref","deserialize","empty","ends_with","eq","eq","events_channel","exec","firewall","firewall_channel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_identity","from_iter","from_multihash","from_protobuf_encoding","from_public_key","from_str","from_str","generate_ed25519","generate_secp256k1","hash","hash","ident","identity","inner","interface","into","into","into","into","into","into","into","into","into","into_authentic","into_identity","is_empty","is_public_key","iter","keypair","len","libp2p_reexport","local_peer_id","max_established_incoming","max_established_outgoing","max_established_per_peer","max_pending_incoming","max_pending_outgoing","multihash","ne","ne","new","new","new_version","partial_cmp","partial_cmp","peer","pop","protocol_name","protocol_name","public","public","public","push","random","replace","request","request_id","requests_channel","response_tx","rsa_from_pkcs8","secp256k1_from_der","secret","secret","serialize","sign","source","start","to_base58","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_or_return","use_inner","uses_relay","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","waker","with","with_capacity","with_max_established_incoming","with_max_established_outgoing","with_max_established_per_peer","with_max_pending_incoming","with_max_pending_outgoing","current","limit","current","limit","noise_keypair","peer_id","addresses","cause","cause","endpoint","endpoint","error","error","failure","local_addr","num_established","num_established","peer","peer","peer","request_id","send_back_addr","BehaviourEvent","EMPTY_QUEUE_SHRINK_THRESHOLD","InboundFailure","NetBehaviour","NetBehaviourConfig","NetworkAction","OutboundFailure","PendingApprovalRequest","PendingPeerRuleRequest","ProtoHandler","ReceivedRequest","ReceivedResponse","add_address","add_dialing_relay","addresses","addresses_of_peer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_approval_status","connection_timeout","connection_timeout","default","firewall","firewall","firewall","fmt","from","from","from","get_established_connections","get_firewall_default","get_peer_rules","handle_handler_event","handle_updated_peer_rule","inject_addr_reach_failure","inject_address_change","inject_connected","inject_connection_closed","inject_connection_established","inject_dial_failure","inject_disconnected","inject_event","inject_new_listen_addr","into","into","into","mdns","new","new_handler","next_inbound_id","next_request_id","next_request_id","pending_approval_rqs","pending_rule_rqs","permission_req_channel","poll","query_peer_rule","query_request_approval","relay","remove_address","remove_dialing_relay","remove_firewall_default","remove_peer_rule","request_manager","request_timeout","request_timeout","send_firewall","send_request","set_firewall_default","set_peer_rule","set_relay_fallback","supported_protocols","supported_protocols","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","use_specific_relay","vzip","vzip","vzip","failure","failure","peer","peer","peer","peer","request","request_id","request_id","request_id","request_id","response","response_tx","AllowAll","Ask","Both","FirewallConfiguration","FirewallRequest","FirewallRules","Inbound","Outbound","PeerSpecificRule","RejectAll","RequestApproval","Restricted","Rule","RuleDirection","allow_all","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","empty","fmt","fmt","from","from","from","from","from","get_default_rules","get_effective_rules","get_rules","inbound","into","into","into","into","into","is_inbound","is_outbound","new","new","outbound","peer_rules","permissions","permit_all","reject_all","set_default","set_rule","set_rule","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","approval_tx","direction","peer","peer","request","rule_tx","_maker","restriction","0","0","FirewallPermission","PermissionValue","RequestPermissions","VariantPermission","add_permissions","all","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","eq","eq","fmt","fmt","from","from","from","into","into","is_no_permissions","ne","ne","new","none","permission","permits","remove_permissions","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","value","vzip","vzip","0","0","AllowAll","Ask","Both","FirewallConfiguration","FirewallPermission","FirewallRequest","FirewallRules","Inbound","Outbound","PeerSpecificRule","PermissionValue","RejectAll","RequestApproval","RequestPermissions","Restricted","Rule","RuleDirection","VariantPermission","default","inbound","outbound","peer_rules","permission","approval_tx","direction","peer","peer","request","rule_tx","_maker","restriction","Authenticated","IdKeys","InitKeypair","StrongholdP2p","StrongholdP2pBuilder","add_address","add_dialing_relay","ban_peer","behaviour_config","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build_with_transport","clone","clone_into","command_tx","connect_peer","connections_limit","errors","events_channel","firewall_channel","from","from","from","get_addrs","get_connections","get_firewall_default","get_listeners","get_peer_id","get_peer_rules","ident","into","into","into","is_connected","local_peer_id","msg_channel","new","new","remove_address","remove_dialing_relay","remove_firewall_default","remove_peer_rule","requests_channel","send_command","send_request","set_firewall_default","set_peer_rule","set_relay_fallback","start_listening","start_relayed_listening","stop_listening","stop_listening_addr","stop_listening_relay","swarm_task","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","types","unban_peer","use_specific_relay","vzip","vzip","vzip","with_connection_timeout","with_connections_limit","with_firewall_config","with_keys","with_request_timeout","noise_keypair","peer_id","Banned","ConnectionErr","ConnectionLimit","ConnectionLimit","DialErr","DialRelay","InvalidAddress","InvalidPeerId","Io","Io","ListenErr","ListenRelayErr","MultiaddrNotSupported","NoAddresses","Shutdown","Shutdown","Shutdown","Transport","Transport","Transport","TransportErr","UnreachableAddrs","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","current","limit","current","limit","Block","BufferLatest","ChannelSinkConfig","DropLatest","EventChannel","borrow","borrow","borrow_mut","borrow_mut","buffer","drop","from","from","inner","into","into","new","poll_close","poll_flush","poll_next","poll_ready","start_send","try_from","try_from","try_into","try_into","type_id","type_id","use_inner","vzip","vzip","waker","Ack","AddDialingRelay","AddPeerAddr","BanPeer","ConnectPeer","GetConnections","GetFirewallDefault","GetIsConnected","GetListeners","GetPeerAddrs","GetPeerRules","RemoveDialingRelay","RemoveFirewallDefault","RemovePeerAddr","RemovePeerRule","SendRequest","SetFirewallDefault","SetPeerRule","SetRelayFallback","StartListening","StartRelayedListening","StopListening","StopListeningAddr","StopListeningRelay","SwarmOperation","SwarmTask","UnbanPeer","UseSpecificRelay","await_connection","await_listen","await_relayed_listen","await_response","borrow","borrow","borrow_mut","borrow_mut","command_rx","event_channel","from","from","handle_command","handle_swarm_event","into","into","listeners","new","remove_listener","request_channel","run","shutdown","start_listening","start_relayed_listening","swarm","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","address","address","address","address","address","default","direction","direction","direction","direction","is_exclusive","peer","peer","peer","peer","peer","peer","peer","peer","peer","peer","peer","peer","peer","peer","relay","relay","relay","relay_addr","request","rule","target","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","tx_yield","use_relay_fallback","0","ConnectionClosed","ConnectionClosed","ConnectionClosed","ConnectionEstablished","DialFailure","ExpiredListenAddr","Inbound","InboundFailure","InboundFailure","IncomingConnectionError","Listener","ListenerClosed","ListenerError","NetworkEvent","NewListenAddr","NotPermitted","NotPermitted","Outbound","OutboundFailure","ReceiveRequest","RequestDirection","RequestId","RqRsMessage","Shutdown","SwarmEv","Timeout","Timeout","UnsupportedProtocols","addrs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","hash","inc","into","into","into","into","into","into","into","ne","new","partial_cmp","peer","request","request_id","response_tx","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uses_relay","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","addresses","cause","cause","endpoint","endpoint","error","error","failure","local_addr","num_established","num_established","peer","peer","peer","request_id","send_back_addr","AuthenticKeypair","Banned","ConnectionLimit","ConnectionLimits","DialError","Ed25519","Executor","InvalidAddress","Keypair","Multiaddr","NoAddresses","NoiseKeypair","PeerId","Rsa","Secp256k1","bytes","exec","identity","keypair","max_established_incoming","max_established_outgoing","max_established_per_peer","max_pending_incoming","max_pending_outgoing","multihash","public","secret"],"q":["p2pp2p::ConnectionErr","","p2p::DialErr","","p2p::InitKeypair","","p2p::NetworkEvent","","","","","","","","","","","","","","","","p2p::behaviour","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p2p::behaviour::BehaviourEvent","","","","","","","","","","","","","p2p::behaviour::firewall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p2p::behaviour::firewall::FirewallRequest","","","","","","p2p::behaviour::firewall::Rule","","p2p::behaviour::firewall::permissions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p2p::firewall","","","","","","","","","","","","","","","","","","","","","","","","","p2p::firewall::FirewallRequest","","","","","","p2p::firewall::Rule","","p2p::interface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p2p::interface::InitKeypair","","p2p::interface::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p2p::interface::errors::ConnectionErr","","p2p::interface::errors::DialErr","","p2p::interface::msg_channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p2p::interface::swarm_task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p2p::interface::swarm_task::SwarmOperation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p2p::interface::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p2p::interface::types::NetworkEvent","","","","","","","","","","","","","","","","p2p::libp2p_reexport","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A DH keypair that is authentic w.r.t. a …","Use authenticated noise-keypair. <strong>Note</strong>: The peer-id has to …","The peer is currently banned.","The peer is currently banned.","Block until the channel has enough capacity for the new …","In case that the channel is full, store new events in a …","Configure how the network should behave in the case that …","A connection with the given peer has been closed, …","The connection closed before a response was received.","The connection closed before a response could be send.","Error on establishing a connection.","A connection to the given peer has been opened.","The configured limit for simultaneous outgoing connections…","The connection was dropped because the connection limit …","The configured limit for simultaneous outgoing connections…","The configurable connection limits.","Error on dialing a peer and establishing a connection.","The possible failures of <code>ExpandedSwarm::dial</code>.","The request could not be sent because a dialing attempt …","Establishing a connection to the relay failed.","New events will be dropped if the channel is full.","An Ed25519 keypair.","Information about the connection with a remote peer as …","Wrapper of a <code>mpsc::channel</code> for sending events. The …","Implemented on objects that can run a <code>Future</code> in the …","One of the listeners has reported the expiration of a …","Identity Keys that are used to derive the noise keypair …","Inbound requests sent from a remote peer.","Possible failures occurring in the context of receiving …","A failure occurred in the context of receiving an inbound …","An error happened on a connection during its initial …","Use existing keypair for authentication on the transport …","The address given for dialing is invalid.","The address given for dialing is invalid.","The peer identity obtained on the connection did not …","An I/O error occurred on the connection.","An I/O Error occurred.","Identity keypair of a node.","Error on listening on an address.","Error on listening on a relayed address.","Active Listener of the local peer.","One of the listeners gracefully closed.","One of the listeners reported a non-fatal error.","Protocol Name. A Request-Response messages will only be …","Representation of a Multiaddr.","The address is not supported.","Events happening in the Network. Includes events about …","One of the listeners has reported a new local listening …","No direct or relayed addresses for the peer are known.","<code>NetworkBehaviour::addresses_of_peer</code> returned no addresses …","DH keypair.","The local firewall blocked the request.","The local firewall blocked the request.","Outbound requests sent to a remote peer.","Possible failures occurring in the context of sending an …","Identifier of a peer of the network.","Inbound Request from a remote peer. It is expected that a …","Direction of a request.","Unique Id for each request. <strong>Note</strong>: This ID is only local …","Trait for the generic request and response messages.","An RSA keypair.","A Secp256k1 keypair.","The communication system was shut down before the dialing …","The communication system was shut down before the …","The communication system was shut down before the …","<code>StrongholdP2p</code> was shut down before a response was …","Interface for the stronghold-p2p library to create a …","Builder for new <code>StrongholdP2p</code>.","The request timed out before a response was received.","The inbound request timed out, either while reading the …","An error occurred while negotiating the transport …","Listening on the address failed on the transport layer.","Listening on the address failed on the transport layer.","Error on the Transport.","No known address for the peer could be reached.","The remote supports none of the requested protocols.","The addresses associated with this listener.","","","Assemble a relayed address for the target following the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new, empty multiaddress.","Checks whether the given <code>Multiaddr</code> is a suffix of this …","","","","Run the given future in the background until it ends.","","","","","","Convert a Multiaddr to a string","","","","","","","","","","","","","","","","","","","","","","","Parses a <code>PeerId</code> from bytes.","Creates an X25519 <code>Keypair</code> from an <code>identity::Keypair</code>, if …","","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.","Decode a private key from a protobuf structure and parse …","Builds a <code>PeerId</code> from a public key.","","","Generate a new Ed25519 keypair.","Generate a new Secp256k1 keypair.","","","","","","","","","","","","","","","","Turn this DH keypair into a <code>AuthenticKeypair</code>, i.e. a DH …","Extract the public <code>KeypairIdentity</code> from this …","Returns true if the length of this multiaddress is 0.","Checks whether the public key passed as parameter matches …","Returns the components of this multiaddress.","","Return the length in bytes of this multiaddress.","","","","","","","","","","","Create a new X25519 keypair.","Create a new X25519 keypair.","","","","ID of the remote peer that send the request.","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …","","","Get the public key of this keypair.","The public key of the DH keypair.","","Adds an already-parsed address component to the end of …","Generates a random peer ID from a cryptographically …","Replace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.","Request from the remote peer.","ID of the request.","","Channel for returning the response.","Decode an keypair from a DER-encoded secret key in PKCS#8 …","Decode a keypair from a DER-encoded Secp256k1 secret key …","The secret key of the DH keypair.","","","Sign a message using the private key of this keypair, …","","","Returns a base-58 encoded string of this <code>PeerId</code>.","Returns a raw bytes representation of this <code>PeerId</code>.","","","","","","","","","","","","Return a copy of this <code>Multiaddr</code>’s byte representation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the listener uses a relay.","","","","","","","","","","","","Like <code>Multiaddr::push</code> but consumes <code>self</code>.","Create a new, empty multiaddress with the given capacity.","Configures the maximum number of concurrent established …","Configures the maximum number of concurrent established …","Configures the maximum number of concurrent established …","Configures the maximum number of concurrently incoming …","Configures the maximum number of concurrently outgoing …","","","","","","","The addresses that the listener was listening on. These …","Potential Error that resulted in the disconnection.","Potential Error in the stream that cause the listener to …","Endpoint of the connection that has been opened.","Endpoint of the connection that has been closed.","The error that happened.","The listener error.","","Local connection address. This address has been earlier …","Number of established connections to this peer, including …","Number of other remaining connections to this same peer.","","Identity of the peer that connected.","Identity of the peer that disconnected.","","Address used to send back data to the remote.","Requests and failure events emitted by the <code>NetBehaviour</code>.","","A failure occurred in the context of receiving an inbound …","Protocol for customization for the <code>Swarm</code>.","Configuration of the <code>NetBehaviour</code>.","","A failure occurred in the context of sending an outbound …","","","","An inbound request was received from a remote peer. The …","The response for a previously sent request was received.","Add an address for the remote peer.","Add a relay to the list of relays that may be tried to …","","","","","","","","","","Keep-alive timeout of idle connections.","","","","Configuration for the firewall that checks every outbound …","","","","","","","Get the current default rules for the firewall. The …","Get the explicit rules for a peer, if there are any.","","","","","","","","","","","","","","","","Create a new instance of a NetBehaviour to customize the …","","","<code>RequestId</code> for the next outbound request.","","","","","","","","","Remove an address from the known addresses of a remote …","Remove a relay from the list of dialing relays.","Remove a default firewall rule. If there is no default …","Remove a peer specific rule, which will result in using …","","Timeout for inbound and outbound requests.","","","Send a new request to a remote peer.","Set the default configuration for the firewall. The …","Set a peer specific rule to overwrite the default …","Configure whether it should be attempted to reach the …","Supported versions of the <code>MessageProtocol</code>.","","","","","","","","","","","Dial the target via the specified relay. The <code>is_exclusive</code> …","","","","","","","","","","Request from the remote peer.","","","","","Response from the remote peer.","Channel for returning the response","Allow all requests","Ask for individual approval for each request by sending a …","All requests.","Configuration for the firewall of the <code>NetBehaviour</code>. This …","Requests for approval and rules that are not covered by …","Rule configuration for inbound and outbound requests.","Only inbound requests.","Only outbound requests.","Query for a peer specific rule. This is necessary if …","Reject all requests","Request approval for a specific request due a <code>Rule::Ask</code> …","Approve /  Reject request based on the set function.","Rules for requests in a specific <code>RequestDirection</code>.","The direction for which a rule is applicable.","Create a new instance with default configuration allowing …","","","","","","","","","","","","","","","","","","Default rules that are used if there are no peer-specific …","Create a new instance with no rules.","","","","","","","","Get default firewall rules that are used if there are no …","Get effective rules for a peer i.g. peer-specific rules …","Get the peer specific rules.","Rule for inbound requests.","","","","","","Check if the rule is applicable for inbound requests.","Check if the rule is applicable for outbound requests.","Create a new instance with the given default rules. If no …","Create a new instance with the given rules.","Rule for outbound requests.","Peer specific rules.","","Create a new instance that permits all inbound and …","Create a new instance with default configuration …","Set the default rules for one or both directions. In case …","Set one or both rules for a specific peer. In case of <code>None</code>…","Change one or both rules to the new rule.","","","","","","","","","","","","","","","","","","","","","","","","Channel for returning the approval. If the Sender is …","The direction of the request.","The remote peer for which the rule is required.","The peer from / to which the request is send.","The request message.","Channel for returning the new firewall rule. If the …","","","","","The sum of allowed  <code>PermissionValue</code>s. This is realized as …","The permission value for request variants. This is …","Implements the <code>VariantPermission</code> for struct/ unions with …","The permission value for the different variants of an …","Adds new <code>PermissionValue</code> to the sum, hence allows these …","Create new <code>FirewallPermission</code> with max permission; all  …","","","","","","","","","","","","","","","","","","","","Check if no values are allowed.","","","Create a new permission value for an index, the value …","Create new <code>FirewallPermission</code> with no permissions.","","Check if the sum includes this <code>PermissionValue</code> i.g. if a …","Removes  <code>PermissionValue</code> from the sum to remove …","","","","","","","","","","","","","","","Allow all requests","Ask for individual approval for each request by sending a …","All requests.","Configuration for the firewall of the <code>NetBehaviour</code>. This …","The sum of allowed  <code>PermissionValue</code>s. This is realized as …","Requests for approval and rules that are not covered by …","Rule configuration for inbound and outbound requests.","Only inbound requests.","Only outbound requests.","Query for a peer specific rule. This is necessary if …","The permission value for request variants. This is …","Reject all requests","Request approval for a specific request due a <code>Rule::Ask</code> …","Implements the <code>VariantPermission</code> for struct/ unions with …","Approve /  Reject request based on the set function.","Rules for requests in a specific <code>RequestDirection</code>.","The direction for which a rule is applicable.","The permission value for the different variants of an …","Default rules that are used if there are no peer-specific …","Rule for inbound requests.","Rule for outbound requests.","Peer specific rules.","","Channel for returning the approval. If the Sender is …","The direction of the request.","The remote peer for which the rule is required.","The peer from / to which the request is send.","The request message.","Channel for returning the new firewall rule. If the …","","","Use authenticated noise-keypair. <strong>Note</strong>: The peer-id has to …","Identity Keys that are used to derive the noise keypair …","Use existing keypair for authentication on the transport …","Interface for the stronghold-p2p library to create a …","Builder for new <code>StrongholdP2p</code>.","Add an address for the remote peer.","Add a relay to the list of relays that may be tried to …","Bans a peer by its peer ID.","","","","","","","","<code>Self::build_with_transport</code> with a <code>Transport</code> based on …","Create a new <code>StrongholdP2p</code> instance with an underlying …","","","","Establish a new new connection to the remote peer. This …","","","","","","","","Get the known addresses for a remote peer.","","Get the current default rules for the firewall. The …","","Get the <code>PeerId</code> of the local peer.","Get the explicit rules for a peer, if there are any.","","","","","Check whether the Network has an established connection …","","","Parameters:","Create a new <code>StrongholdP2p</code> instance with the default …","Remove an address from the known addresses of a remote …","Remove a relay from the list of dialing relays.","Remove a default firewall rule. If there is no default …","Remove a peer specific rule, which will result in using …","","","Send a new request to a remote peer.","Set the default configuration for the firewall. The …","Set a peer specific rule to overwrite the default …","Configure whether it should be attempted to reach the …","Start listening on the network on the given address. In …","Start listening via a relay peer on an address following …","Stop listening on all listeners.","Stop listening on the listener associated with the given …","Stop listening via the given relay.","","","","","","","","","","","","","Unbans a peer.","Dial the target via the specified relay. The <code>is_exclusive</code> …","","","","Set the timeout for a idle connection to a remote peer.","Set the limit for simultaneous connections. By default no …","Set the firewall configuration. The peer-specific rules …","Set the keypair that is used for authenticating the …","Set a timeout for receiving a response after a request …","","","The peer is currently banned.","Error on establishing a connection.","The configured limit for simultaneous outgoing connections…","The connection was dropped because the connection limit …","Error on dialing a peer and establishing a connection.","Establishing a connection to the relay failed.","The address given for dialing is invalid.","The peer identity obtained on the connection did not …","An I/O error occurred on the connection.","An I/O Error occurred.","Error on listening on an address.","Error on listening on a relayed address.","The address is not supported.","No direct or relayed addresses for the peer are known.","The communication system was shut down before the dialing …","The communication system was shut down before the …","The communication system was shut down before the …","An error occurred while negotiating the transport …","Listening on the address failed on the transport layer.","Listening on the address failed on the transport layer.","Error on the Transport.","No known address for the peer could be reached.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Block until the channel has enough capacity for the new …","In case that the channel is full, store new events in a …","Configure how the network should behave in the case that …","New events will be dropped if the channel is full.","Wrapper of a <code>mpsc::channel</code> for sending events. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A connection with the given peer has been closed, …","The connection closed before a response was received.","The connection closed before a response could be send.","A connection to the given peer has been opened.","The request could not be sent because a dialing attempt …","One of the listeners has reported the expiration of a …","Inbound requests sent from a remote peer.","Possible failures occurring in the context of receiving …","A failure occurred in the context of receiving an inbound …","An error happened on a connection during its initial …","Active Listener of the local peer.","One of the listeners gracefully closed.","One of the listeners reported a non-fatal error.","Events happening in the Network. Includes events about …","One of the listeners has reported a new local listening …","The local firewall blocked the request.","The local firewall blocked the request.","Outbound requests sent to a remote peer.","Possible failures occurring in the context of sending an …","Inbound Request from a remote peer. It is expected that a …","Direction of a request.","Unique Id for each request. <strong>Note</strong>: This ID is only local …","Trait for the generic request and response messages.","<code>StrongholdP2p</code> was shut down before a response was …","","The request timed out before a response was received.","The inbound request timed out, either while reading the …","The remote supports none of the requested protocols.","The addresses associated with this listener.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ID of the remote peer that send the request.","Request from the remote peer.","ID of the request.","Channel for returning the response.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the listener uses a relay.","","","","","","","","","The addresses that the listener was listening on. These …","Potential Error that resulted in the disconnection.","Potential Error in the stream that cause the listener to …","Endpoint of the connection that has been opened.","Endpoint of the connection that has been closed.","The error that happened.","The listener error.","","Local connection address. This address has been earlier …","Number of established connections to this peer, including …","Number of other remaining connections to this same peer.","","Identity of the peer that connected.","Identity of the peer that disconnected.","","Address used to send back data to the remote.","A DH keypair that is authentic w.r.t. a …","The peer is currently banned.","The configured limit for simultaneous outgoing connections…","The configurable connection limits.","The possible failures of <code>ExpandedSwarm::dial</code>.","An Ed25519 keypair.","Implemented on objects that can run a <code>Future</code> in the …","The address given for dialing is invalid.","Identity keypair of a node.","Representation of a Multiaddr.","<code>NetworkBehaviour::addresses_of_peer</code> returned no addresses …","DH keypair.","Identifier of a peer of the network.","An RSA keypair.","A Secp256k1 keypair.","","Run the given future in the background until it ends.","","","","","","","","","",""],"i":[1,0,2,3,4,5,5,0,6,7,8,0,6,3,9,4,0,0,0,7,10,5,11,0,0,0,6,2,12,0,6,6,0,3,4,9,9,13,0,0,0,0,6,6,0,0,13,0,6,3,4,0,7,8,12,0,0,0,0,0,0,11,11,3,14,10,7,0,0,7,8,9,14,10,0,3,7,15,16,17,0,0,18,19,20,16,17,21,11,4,22,23,19,20,16,17,21,11,4,22,23,24,16,19,20,16,17,21,11,22,23,19,20,16,17,21,11,22,23,16,17,25,20,18,20,21,23,16,16,16,16,17,18,26,0,18,19,20,16,16,17,17,21,4,4,19,20,16,16,16,16,16,17,17,21,11,4,4,22,22,22,23,17,22,16,17,11,17,16,17,11,11,16,17,18,23,24,0,19,20,16,17,21,11,4,22,23,22,23,16,17,16,23,16,0,25,21,21,21,21,21,17,16,17,22,22,19,16,17,27,16,19,16,11,22,22,16,17,16,27,27,18,27,11,11,22,22,16,11,4,20,17,17,19,20,16,17,21,11,22,23,16,17,4,16,19,20,16,16,16,16,17,17,17,21,11,4,22,23,19,20,16,17,21,11,4,22,23,19,20,16,17,21,11,4,22,23,0,24,15,19,19,20,16,17,21,11,4,22,23,24,16,16,21,21,21,21,21,28,28,29,29,30,30,31,32,31,33,32,34,35,36,34,33,32,36,33,32,36,34,0,0,37,0,0,0,37,0,0,0,37,37,38,38,38,38,39,38,37,39,38,37,38,39,38,39,0,39,38,37,39,38,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,38,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,38,38,38,38,38,38,39,38,39,38,37,39,38,37,39,38,37,38,39,38,37,40,41,42,40,43,41,42,42,40,43,41,43,42,44,44,45,0,0,0,45,45,46,44,46,44,0,0,47,46,47,44,45,48,46,47,44,45,48,44,45,48,44,45,48,47,47,48,44,45,46,47,44,45,48,47,47,47,48,46,47,44,45,48,45,45,47,48,48,47,0,48,47,47,47,48,44,45,48,46,47,44,45,48,46,47,44,45,48,46,47,44,45,48,46,47,44,45,48,49,49,50,49,49,50,51,51,52,53,0,0,0,0,53,53,52,53,52,53,52,53,52,53,52,52,53,53,52,53,52,53,53,52,53,53,52,53,52,53,54,53,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,44,44,45,0,0,0,0,45,45,46,0,44,46,0,44,0,0,0,47,48,48,47,54,49,49,50,49,49,50,51,51,2,2,0,0,0,25,25,25,18,2,18,25,2,18,25,18,18,25,25,25,25,18,0,18,18,2,18,25,25,25,25,25,25,25,18,2,18,25,25,25,0,18,25,25,25,25,25,18,25,25,25,25,25,25,25,25,25,25,0,25,2,18,25,2,18,25,2,18,25,0,25,25,2,18,25,18,18,18,18,18,30,30,3,0,3,9,0,10,3,9,9,13,0,0,13,3,3,14,10,9,14,10,0,3,3,9,13,14,10,3,9,13,14,10,3,3,9,9,13,13,14,14,10,10,3,3,9,9,13,13,14,14,10,10,10,10,3,9,13,14,10,3,9,13,14,10,3,9,13,14,10,3,9,13,14,10,3,9,13,14,10,3,9,13,14,10,28,28,29,29,5,5,0,5,0,5,24,5,24,24,24,5,24,24,5,24,24,24,24,24,24,24,5,24,5,24,5,24,24,5,24,24,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,55,55,56,56,56,56,55,56,55,56,56,56,55,56,56,56,55,56,56,56,56,56,56,56,56,56,56,55,56,55,56,55,56,55,56,57,58,59,60,61,62,62,63,64,65,66,67,68,69,70,59,60,61,71,72,73,64,65,74,75,76,77,66,76,67,64,66,67,68,69,78,57,76,79,80,58,77,70,59,60,61,71,72,66,81,62,63,73,64,65,74,75,72,1,6,7,8,6,7,6,12,0,6,6,0,6,6,0,6,7,8,12,0,0,0,0,0,7,0,7,8,7,15,1,27,15,12,6,7,8,1,27,15,12,6,7,8,1,15,12,7,8,1,15,12,7,8,1,1,12,7,8,1,1,27,15,12,6,7,7,8,8,1,27,15,12,6,7,8,1,12,1,1,27,15,12,6,7,8,1,1,1,27,27,27,27,1,15,12,7,8,1,7,8,1,27,15,12,6,6,7,8,1,27,15,12,6,7,8,1,27,15,12,6,7,8,15,1,1,27,15,12,6,7,8,31,32,31,33,32,34,35,36,34,33,32,36,33,32,36,34,0,4,4,0,0,11,0,4,0,0,4,0,0,11,11,16,26,23,23,21,21,21,21,21,17,22,22],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["multihash",3]],[[["multiaddr",3],["peerid",3]],["multiaddr",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["messageprotocol",3]],[[],["establishedconnections",3]],[[],["multiaddr",3]],[[],["peerid",3]],[[],["connectionlimits",3]],[[],["keypair",4]],[[],["keypair",3]],[[],["authentickeypair",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["multiaddr",3]],["ordering",4]],[[["peerid",3]],["ordering",4]],null,null,null,[[]],[[],["connectionlimits",3]],[[]],[[],[["result",4,["multiaddr"]],["multiaddr",3]]],[[],["multiaddr",3]],[[["multiaddr",3]],["bool",15]],[[["multiaddr",3]],["bool",15]],[[["peerid",3]],["bool",15]],null,[[["box",3,["future","global"]],["pin",3,["box"]]]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[["protocol",4]],["multiaddr",3]],[[["ipv4addr",3]],["multiaddr",3]],[[["ipv6addr",3]],["multiaddr",3]],[[["ipaddr",4]],["multiaddr",3]],[[["publickey",4]],["peerid",3]],[[]],[[]],[[]],[[["dialerror",4]],["dialerror",4]],[[]],[[["secretkey",3,["x25519"]],["x25519",3]],[["x25519",3],["keypair",3,["x25519"]]]],[[]],[[["x25519spec",3],["secretkey",3,["x25519spec"]]],[["keypair",3,["x25519spec"]],["x25519spec",3]]],[[]],[[],[["peerid",3],["error",4],["result",4,["peerid","error"]]]],[[["keypair",4]],[["authentickeypair",3,["x25519"]],["option",4,["authentickeypair"]]]],[[],["multiaddr",3]],[[["multihash",3,["uint"]],["uint",3,["uint","b0"]]],[["peerid",3],["multihash",3,["uint"]],["result",4,["peerid","multihash"]]]],[[],[["decodingerror",3],["result",4,["keypair","decodingerror"]],["keypair",4]]],[[["publickey",4]],["peerid",3]],[[["str",15]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[["str",15]],[["peerid",3],["result",4,["peerid"]]]],[[],["keypair",4]],[[],["keypair",4]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["keypair",4]],[["authentickeypair",3],["result",4,["authentickeypair","noiseerror"]],["noiseerror",4]]],[[],["keypairidentity",3]],[[],["bool",15]],[[["publickey",4]],[["option",4,["bool"]],["bool",15]]],[[],["iter",3]],null,[[],["usize",15]],null,null,null,null,null,null,null,null,[[["multiaddr",3]],["bool",15]],[[["peerid",3]],["bool",15]],[[],[["x25519",3],["keypair",3,["x25519"]]]],[[],[["keypair",3,["x25519spec"]],["x25519spec",3]]],[[["u8",15]]],[[["multiaddr",3]],[["option",4,["ordering"]],["ordering",4]]],[[["peerid",3]],[["option",4,["ordering"]],["ordering",4]]],null,[[],[["option",4,["protocol"]],["protocol",4]]],[[]],[[]],[[],["publickey",4]],[[],["publickey",3]],null,[[["protocol",4]]],[[],["peerid",3]],[[["usize",15]],[["multiaddr",3],["option",4,["multiaddr"]]]],null,null,null,null,[[],[["decodingerror",3],["result",4,["keypair","decodingerror"]],["keypair",4]]],[[],[["decodingerror",3],["result",4,["keypair","decodingerror"]],["keypair",4]]],[[],["secretkey",3]],null,[[],["result",4]],[[],[["vec",3,["u8","global"]],["result",4,["vec","signingerror"]],["signingerror",3]]],[[],[["option",4,["error"]],["error",8]]],null,[[],["string",3]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],["result",4]],[[],["result",4]],[[["string",3]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[],["result",4]],[[["str",15]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[["multihash",3,["uint"]],["uint",3,["uint","b0"]]],[["peerid",3],["result",4,["peerid"]]]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],[["peerid",3],["result",4,["peerid"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["protocol",4]],["multiaddr",3]],[[["usize",15]],["multiaddr",3]],[[["option",4,["u32"]],["u32",15]],["connectionlimits",3]],[[["option",4,["u32"]],["u32",15]],["connectionlimits",3]],[[["option",4,["u32"]],["u32",15]],["connectionlimits",3]],[[["option",4,["u32"]],["u32",15]],["connectionlimits",3]],[[["option",4,["u32"]],["u32",15]],["connectionlimits",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["multiaddr",3],["peerid",3]]],[[["multiaddr",3],["peerid",3],["option",4,["multiaddr"]]],[["multiaddr",3],["option",4,["multiaddr"]]]],null,[[["peerid",3]],[["multiaddr",3],["vec",3,["multiaddr"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["requestdirection",4],["peerid",3],["requestid",3]],["approvalstatus",4]],null,null,[[]],null,null,null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["vec",3]],[[],["firewallrules",3]],[[["peerid",3]],[["firewallrules",3],["option",4,["firewallrules"]]]],[[["peerid",3],["connectionid",3],["handleroutevent",4]]],[[["peerid",3],["ruledirection",4]]],[[["option",4,["peerid"]],["error",8],["multiaddr",3],["peerid",3]]],[[["peerid",3],["connectedpoint",4],["connectionid",3]]],[[["peerid",3]]],[[["connectionid",3],["connectedpoint",4],["peerid",3]]],[[["connectionid",3],["connectedpoint",4],["peerid",3]]],[[["peerid",3]]],[[["peerid",3]]],[[["peerid",3],["connectionid",3]]],[[["listenerid",3],["multiaddr",3]]],[[]],[[]],[[]],null,[[["netbehaviourconfig",3],["relay",3],["mdns",3],["sender",3,["firewallrequest"]],["firewallrequest",4]]],[[]],null,[[],["requestid",3]],null,null,null,null,[[["context",3]],[["poll",4,["networkbehaviouraction"]],["networkbehaviouraction",4]]],[[["peerid",3]]],[[["requestdirection",4],["peerid",3],["requestid",3]]],null,[[["multiaddr",3],["peerid",3]]],[[["peerid",3]]],[[["ruledirection",4]]],[[["peerid",3],["ruledirection",4]]],null,null,null,[[["sender",3,["firewallrequest"]],["firewallrequest",4]]],[[["peerid",3]],["requestid",3]],[[["rule",4],["ruledirection",4]]],[[["rule",4],["peerid",3],["ruledirection",4]]],[[["peerid",3],["bool",15]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["peerid",3],["bool",15]],[["multiaddr",3],["option",4,["multiaddr"]]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rule",4]],[[],["ruledirection",4]],[[],["firewallrules",3]],[[]],[[]],[[]],[[]],null,[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["firewallrules",3]],[[["peerid",3]],["firewallrules",3]],[[["peerid",3]],[["firewallrules",3],["option",4,["firewallrules"]]]],null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["rule",4],["option",4,["rule"]]]],[[["rule",4],["option",4,["rule"]]]],null,null,null,[[]],[[]],[[["rule",4],["ruledirection",4],["option",4,["rule"]]]],[[["option",4,["rule"]],["rule",4],["peerid",3],["ruledirection",4]]],[[["rule",4],["ruledirection",4],["option",4,["rule"]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["permissionvalue",3]],[[],["firewallpermission",3]],[[]],[[]],[[["permissionvalue",3]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["firewallpermission",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[],["bool",15]],[[["permissionvalue",3]],["bool",15]],[[["firewallpermission",3]],["bool",15]],[[["u8",15]],["option",4]],[[]],[[],["permissionvalue",3]],[[["permissionvalue",3]],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["permissionvalue",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["multiaddr",3],["peerid",3]]],[[["multiaddr",3],["peerid",3],["option",4,["multiaddr"]]]],[[["peerid",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["strongholdp2p",3]],[[]],null,[[["peerid",3]]],null,null,null,null,[[]],[[]],[[]],[[["peerid",3]]],[[]],[[]],[[]],[[],["peerid",3]],[[["peerid",3]]],null,[[]],[[]],[[]],[[["peerid",3]]],null,null,[[["option",4,["eventchannel"]],["eventchannel",3,["networkevent"]],["eventchannel",3,["receiverequest"]],["sender",3,["firewallrequest"]],["firewallrequest",4],["receiverequest",3]]],[[["option",4,["eventchannel"]],["eventchannel",3,["networkevent"]],["eventchannel",3,["receiverequest"]],["sender",3,["firewallrequest"]],["firewallrequest",4],["receiverequest",3]]],[[["multiaddr",3],["peerid",3]]],[[["peerid",3]]],[[["ruledirection",4]]],[[["peerid",3],["ruledirection",4]]],null,[[["swarmoperation",4]]],[[["peerid",3]]],[[["rule",4],["ruledirection",4]]],[[["rule",4],["peerid",3],["ruledirection",4]]],[[["peerid",3],["bool",15]]],[[["multiaddr",3]]],[[["multiaddr",3],["peerid",3],["option",4,["multiaddr"]]]],[[]],[[["multiaddr",3]]],[[["peerid",3]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["peerid",3]]],[[["peerid",3],["bool",15]]],[[]],[[]],[[]],[[["duration",3]]],[[["connectionlimits",3]]],[[["firewallconfiguration",3]]],[[["initkeypair",4]]],[[["duration",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["dialerror",4]]],[[]],[[["pendingconnectionerror",4,["error"]],["error",3]]],[[]],[[["transporterror",4,["error"]],["error",3]]],[[["transporterror",4,["error"]],["error",3]]],[[]],[[["transporterror",4,["error"]],["error",3]]],[[["dialerror",4]]],[[["dialerr",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,[[]],[[]],[[["usize",15],["channelsinkconfig",4]]],[[["context",3],["pin",3]],[["result",4],["poll",4,["result"]]]],[[["context",3],["pin",3]],[["result",4],["poll",4,["result"]]]],[[["context",3],["pin",3]],[["poll",4,["option"]],["option",4]]],[[["context",3],["pin",3]],[["result",4],["poll",4,["result"]]]],[[["pin",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[["swarmoperation",4]]],[[["swarmevent",4,["behaviourevent"]],["behaviourevent",4]]],[[]],[[]],null,[[["swarm",6,["netbehaviour"]],["netbehaviour",3],["option",4,["eventchannel"]],["eventchannel",3,["receiverequest"]],["eventchannel",3,["networkevent"]],["receiver",3,["swarmoperation"]],["receiverequest",3],["swarmoperation",4]]],[[["fn",8]]],null,[[]],[[]],[[["multiaddr",3],["sender",3,["result"]],["result",4,["multiaddr","listenerr"]]]],[[["result",4,["multiaddr","listenrelayerr"]],["multiaddr",3],["peerid",3],["sender",3,["result"]],["option",4,["multiaddr"]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["requestid",3]],[[],["listener",3]],[[],["requestdirection",4]],[[],["outboundfailure",4]],[[],["inboundfailure",4]],[[]],[[]],[[]],[[]],[[]],[[["requestid",3]],["ordering",4]],[[["requestid",3]],["bool",15]],[[["requestdirection",4]],["bool",15]],[[["outboundfailure",4]],["bool",15]],[[["inboundfailure",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["requestid",3]],["bool",15]],[[["u64",15]]],[[["requestid",3]],[["option",4,["ordering"]],["ordering",4]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["swarmevent",4,["behaviourevent"]],["behaviourevent",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["box",3,["future","global"]],["pin",3,["box"]]]],null,null,null,null,null,null,null,null,null,null],"p":[[3,"RequestId"],[4,"InitKeypair"],[4,"DialErr"],[4,"DialError"],[4,"ChannelSinkConfig"],[4,"NetworkEvent"],[4,"OutboundFailure"],[4,"InboundFailure"],[4,"ConnectionErr"],[4,"ListenRelayErr"],[4,"Keypair"],[4,"RequestDirection"],[4,"TransportErr"],[4,"ListenErr"],[3,"Listener"],[3,"Multiaddr"],[3,"PeerId"],[3,"StrongholdP2pBuilder"],[3,"MessageProtocol"],[3,"EstablishedConnections"],[3,"ConnectionLimits"],[3,"NoiseKeypair"],[3,"AuthenticKeypair"],[3,"EventChannel"],[3,"StrongholdP2p"],[8,"Executor"],[3,"ReceiveRequest"],[13,"ConnectionLimit"],[13,"ConnectionLimit"],[13,"Authenticated"],[13,"ListenerClosed"],[13,"ConnectionClosed"],[13,"ConnectionEstablished"],[13,"IncomingConnectionError"],[13,"ListenerError"],[13,"InboundFailure"],[4,"BehaviourEvent"],[3,"NetBehaviour"],[3,"NetBehaviourConfig"],[13,"InboundFailure"],[13,"OutboundFailure"],[13,"ReceivedRequest"],[13,"ReceivedResponse"],[4,"Rule"],[4,"RuleDirection"],[4,"FirewallRequest"],[3,"FirewallConfiguration"],[3,"FirewallRules"],[13,"RequestApproval"],[13,"PeerSpecificRule"],[13,"Restricted"],[3,"PermissionValue"],[3,"FirewallPermission"],[8,"VariantPermission"],[4,"SwarmOperation"],[3,"SwarmTask"],[13,"StartListening"],[13,"StopListeningAddr"],[13,"AddPeerAddr"],[13,"RemovePeerAddr"],[13,"AddDialingRelay"],[13,"SetFirewallDefault"],[13,"RemoveFirewallDefault"],[13,"SetPeerRule"],[13,"RemovePeerRule"],[13,"UseSpecificRelay"],[13,"SendRequest"],[13,"ConnectPeer"],[13,"GetIsConnected"],[13,"GetPeerAddrs"],[13,"RemoveDialingRelay"],[13,"SetRelayFallback"],[13,"GetPeerRules"],[13,"BanPeer"],[13,"UnbanPeer"],[13,"StartRelayedListening"],[13,"StopListeningRelay"],[13,"GetConnections"],[13,"GetListeners"],[13,"StopListening"],[13,"GetFirewallDefault"]]},\
"runtime":{"doc":"Stronghold Protected-access Memory Runtime.","t":[12,8,3,3,3,3,0,0,12,12,12,0,0,0,0,0,12,3,11,11,11,11,11,11,11,11,11,11,5,3,13,4,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,12,11,5,5,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,0,0,0,8,8,17,11,11,10,11,11,10,11,11,10,11,11,11,11,8,11,8,11,8,11,11],"n":["0","Bytes","Guarded","GuardedVec","Secret","ZeroingAlloc","allocator","boxed","boxed","boxed","data","guarded","guarded_vec","secret","sodium","types","0","ZeroingAlloc","alloc","alloc_zeroed","borrow","borrow_mut","dealloc","from","into","try_from","try_into","type_id","zero","Boxed","NoAccess","Prot","ReadOnly","ReadWrite","RefCount","as_mut","as_mut_slice","as_ref","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","drop","eq","eq","fmt","fmt","free","from","from","from","from","into","into","is_empty","is_locked","len","len","lock","lock_memory","mprotect","new","new_unlocked","prot","ptr","random","refs","release","retain","size","to_owned","to_owned","try_from","try_from","try_into","try_into","try_new","type_id","type_id","unlock","unlock_mut","zero","Guarded","Ref","RefMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed","boxed","clone","clone","clone_into","clone_into","deref","deref","deref_mut","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","into","into","into","new","new","new","random","size","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_new","type_id","type_id","type_id","zero","GuardedVec","GuardedVecVisitor","Ref","RefMut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed","boxed","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deserialize","drop","drop","eq","eq","eq","eq","eq","expecting","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","is_empty","len","marker","new","new","new","new","random","serialize","size","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","visit_seq","zero","RefMut","Secret","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","data","data","deref","deref_mut","drop","eq","fmt","from","from","from","into","into","new","new","random","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","zero","mlock","munlock","bytes","const_eq","rand","zero","Bytes","ContiguousBytes","GARBAGE_VALUE","as_bytes","as_mut_bytes","as_mut_u8_ptr","as_mut_u8_ptr","as_mut_u8_ptr","as_u8_ptr","as_u8_ptr","as_u8_ptr","size","size","size","uninitialized","uninitialized","ConstEq","const_eq","Randomized","randomize","Zeroed","copy_and_zero","zero"],"q":["runtime","","","","","","","","","","","","","","","","runtime::allocator","","","","","","","","","","","","","runtime::boxed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runtime::guarded","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runtime::guarded_vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runtime::secret","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runtime::sodium","","runtime::types","","","","runtime::types::bytes","","","","","","","","","","","","","","","","runtime::types::const_eq","","runtime::types::rand","","runtime::types::zero","",""],"d":["","A trait for dealing with Bytes.  Used as the underlying …","A guarded type for protecting fixed-length secrets …","A guarded type for protecting variable-length secrets …","A Type for guarding secrets allocated to the stack.","A Zeroing Allocator which wraps the standard memory …","","","","","Internally protected data for the <code>Secret</code>.","","","","","","","A Zeroing Allocator which wraps the standard memory …","","","","","Zero the memory before deallocation.","","","","","","Zeroes out memory at pointer in place based on the given …","A protected piece of memory.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A guarded type for protecting fixed-length secrets …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A guarded type for protecting variable-length secrets …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A mutable <code>Deref</code> wrapper around the <code>Secret</code>’s internal …","A Type for guarding secrets allocated to the stack.","","","","","","","Internally protected data for the <code>Secret</code>.","a reference to the underlying secret data that will be …","","","Ensures that the <code>Secret</code>’s underlying memory is <code>munlock</code>ed…","","","","Creates a new <code>Secret</code> from existing, unprotected data, and …","","","","Creates a new <code>Secret</code> and invokes the provided callback …","Creates a new <code>RefMut</code>.","Creates a new <code>Secret</code> filled with random bytes and invokes …","","","","","","","","Creates a new <code>Secret</code> filled with zeroed bytes and invokes …","A wrapper around the <code>sodium_mlock</code> function.","A wrapper around the <code>sodium_munlock</code> function.","","","","","A trait for dealing with Bytes.  Used as the underlying …","","","","","","","","","","","","","","","","A trait for comparing types in Constant Time using …","","A trait for generating random bytes via <code>randombytes_buf</code>.","","A trait for zeroing out memory on drop using …","",""],"i":[1,0,0,0,0,0,0,0,2,3,4,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,5,0,5,5,0,6,6,6,6,5,6,5,6,5,6,5,6,6,5,6,5,6,0,5,6,6,6,5,6,6,6,6,6,6,0,0,6,6,6,6,6,6,6,6,6,5,6,5,6,5,6,6,5,6,6,6,6,0,0,0,7,8,2,2,7,8,2,2,7,8,2,7,2,7,2,7,8,8,7,8,7,7,8,8,2,7,8,2,7,8,2,2,7,8,2,7,8,2,2,2,7,2,7,8,2,7,8,2,2,7,8,2,2,0,0,0,0,9,10,11,3,3,9,10,11,3,3,9,10,3,9,3,9,3,9,10,10,3,9,10,9,9,10,10,3,11,9,10,11,3,9,10,11,3,3,9,10,11,3,3,3,11,9,10,11,3,3,3,3,9,3,9,10,11,3,9,10,11,3,3,9,10,11,3,11,3,0,0,4,12,4,12,12,12,4,12,12,12,4,12,12,4,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,0,0,0,0,0,0,0,0,0,13,13,13,14,14,13,14,14,13,14,14,14,14,0,15,0,16,0,17,17],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["layout",3]]],[[["layout",3]]],[[]],[[]],[[["layout",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["prot",4]],[[]],[[]],[[]],[[]],[[["prot",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],null,[[]],[[["usize",15]]],[[["prot",4]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["usize",15]]],null,[[]],[[["prot",4]]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["usize",15]]],null,null,null,[[]],[[]],[[]],[[],["ref",3]],[[]],[[]],[[],["refmut",3]],[[]],null,null,null,[[]],[[],["guarded",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["refmut",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ref",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["boxed",3]]],[[["boxed",3]]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[],["ref",3]],[[]],[[]],[[]],[[]],[[],["refmut",3]],[[]],null,null,null,[[]],[[],["guardedvec",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["bool",15]],[[["refmut",3]],["bool",15]],[[],["bool",15]],[[["ref",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],null,[[["boxed",3]]],[[["boxed",3]]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[["usize",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[],["bool",15]],null,[[]],null,[[]],[[]]],"p":[[3,"ZeroingAlloc"],[3,"Guarded"],[3,"GuardedVec"],[3,"Secret"],[4,"Prot"],[3,"Boxed"],[3,"Ref"],[3,"RefMut"],[3,"Ref"],[3,"RefMut"],[3,"GuardedVecVisitor"],[3,"RefMut"],[8,"ContiguousBytes"],[8,"Bytes"],[8,"ConstEq"],[8,"Randomized"],[8,"Zeroed"]]},\
"stronghold_derive":{"doc":"Proc macros for Stronghold.","t":[24,24,0,5,5,5,5],"n":["GuardDebug","RequestPermissions","comm","build_plain","impl_permission","impl_to_permissioned","match_fields"],"q":["stronghold_derive","","","stronghold_derive::comm","","",""],"d":["A version of the derive <code>Debug</code> trait that blocks parsing …","Implements the <code>VariantPermission</code> for struct/ unions with …","","","","",""],"i":[0,0,0,0,0,0,0],"f":[null,null,null,[[["ident",3],["dataenum",3]],["tokenstream",3]],[[["ident",3],["dataenum",3]],["tokenstream",3]],[[["ident",3],["dataenum",3]],["tokenstream",3]],[[["fields",4]],["tokenstream",3]]],"p":[]},\
"stronghold_utils":{"doc":"","t":[24,24,0,0,5,5,5,5,5,5,5,5,5],"n":["GuardDebug","RequestPermissions","random","test_utils","bytestring","coinflip","random","string","usize","corrupt","corrupt_file","corrupt_file_at","seek_to_beginning"],"q":["stronghold_utils","","","","stronghold_utils::random","","","","","stronghold_utils::test_utils","","",""],"d":["A version of the derive <code>Debug</code> trait that blocks parsing …","Implements the <code>VariantPermission</code> for struct/ unions with …","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,[[["usize",15]],[["vec",3,["u8"]],["u8",15]]],[[],["bool",15]],[[]],[[["usize",15]],["string",3]],[[["usize",15]],["usize",15]],[[]],[[["file",3]]],[[["path",3]]],[[["file",3]]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};